{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cookie composer","text":"<p>Cookie composer builds on the cookie cutter project to generate projects based on one or more cookiecutter templates.</p>"},{"location":"#goals","title":"Goals","text":"<ul> <li>Create new projects from a composition of several templates</li> <li>Add new capabilities to an existing repository by applying a template</li> <li>Apply template updates to the generated project</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Cookie Cutter treats templates like sandwiches. There are templates for hamburgers, clubs, and any other kind of sandwich you can dream up. You might have options and defaults on a template, like <code>Hold the mustard?[False]:</code> or <code>Mustard type [dijon]:</code>, but those are decided by the template author. </p> <p></p> <p>If you look closely at the sandwiches (templates), there is usually many things in common. What if we treated the templates as compositions of other templates:</p> <p></p> <p>You now can manage several smaller and specialized templates that provide functionality. Each template\u2019s options will be specific to what that template needs.</p> <p></p> <p>Cookie Composer uses a composition file to describe the layers required, and even override a template\u2019s default answers.</p> <pre><code>template: bottom-bun\ncontext:\n  toasting_level: light\n  buttered: False\n---\ntemplate: burger\n---\ntemplate: cheese\ncontext:\n  kind: swiss\n---\ntemplate: bacon\ncontext:\n  cooking_level: crispy\n---\ntemplate: ketchup\n---\ntemplate: mustard\ncontext:\n  type: yellow\n---\ntemplate: top-bun\ncontext:\n  toasting_level: light\n  buttered: False\n</code></pre> <p>We have created a repo of highly composable templates as examples or reference. However, Cookie Composer is designed to handle any Cookie Cutter template.</p>"},{"location":"#purpose","title":"Purpose","text":"<ul> <li>Separate out parts to a repo into composable templates<ul> <li>Boilerplate<ul> <li>README, CONTRIBUTING, docs, Makefile, license, tooling configurations</li> </ul> </li> <li>Project-specific<ul> <li>Django</li> <li>Flask</li> <li>Library</li> <li>Data science</li> </ul> </li> <li>CI/CD specific<ul> <li>Helm chart</li> <li>GitHub Actions vs. Jenkins vs. \u2026</li> </ul> </li> <li>Documentation specific<ul> <li>Sphinx</li> <li>MkDocs</li> </ul> </li> </ul> </li> <li>Each composable template is managed and updated individually</li> <li>A project can update itself based on chages in layers</li> </ul>"},{"location":"#please-contribute","title":"Please contribute","text":"<ul> <li>Documentation critiques</li> <li>Documentation suggestions</li> <li>Feature suggestions</li> <li>Feature improvements</li> <li>Edge case identification</li> <li>Code improvements</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#0131-2024-05-05","title":"0.13.1 (2024-05-05)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes","title":"Fixes","text":"<ul> <li>Fixed removing trees on windows. 98aa8e1</li> </ul> <ul> <li> <p>Fixed parseurl with windows path. 9d14ae4</p> <p>Was making the drive letter the scheme. - Fixed test PyPI upload. 7c59fc2</p> </li> </ul> <ul> <li>Fixed missing checkout in workflows. 95c9040</li> </ul> <ul> <li>Fixed a typo in the workflows. aa8aed7</li> </ul> <ul> <li>Fixed docstrings and doc rendering. 42f0392</li> </ul> <ul> <li> <p>Fixed cookiecutter update incompatibilities. 9132c3c</p> <ul> <li>fixed version to 2.6.0</li> <li>fixed outdated requirements management</li> </ul> </li> </ul> <ul> <li> <p>Bump aiohttp from 3.9.2 to 3.9.4 in /requirements. 9eb6f0c</p> <p>Bumps aiohttp from 3.9.2 to 3.9.4. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: aiohttp dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Bump idna from 3.4 to 3.7 in /requirements. 61297b5</p> <p>Bumps idna from 3.4 to 3.7. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: idna dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Bump tqdm from 4.66.1 to 4.66.3 in /requirements. 94421a6</p> <p>Bumps tqdm from 4.66.1 to 4.66.3. - Release notes - Commits</p> <p>updated-dependencies: - dependency-name: tqdm dependency-type: direct:development</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Bump orjson from 3.9.9 to 3.9.15 in /requirements. ff8a8d6</p> <p>Bumps orjson from 3.9.9 to 3.9.15. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: orjson dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 8a67e75</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.5 \u2192 v0.4.2</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e610733</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.2.0 \u2192 v0.3.5</p> </li> </ul> <ul> <li>Migrated docs to use MkDocs. b4e7b57</li> </ul>"},{"location":"changelog/#other","title":"Other","text":""},{"location":"changelog/#updates","title":"Updates","text":"<ul> <li>Updated the GitHub workflows. 68a8602</li> </ul>"},{"location":"changelog/#0130-2024-02-10","title":"0.13.0 (2024-02-10)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_1","title":"Fixes","text":"<ul> <li>Fixed linting. 94a4b7a</li> </ul> <ul> <li>Fixed doc generation. ce88c23</li> </ul> <ul> <li>Fixed local git repo resolution. 115ed5f</li> </ul> <ul> <li>Fixed dev versioning config. 6299c11</li> </ul> <ul> <li> <p>Fixed git worktree issue. e27636c</p> <ul> <li>uses the correct git command depending on the parameters passed.</li> <li>Fixed missing commit sha in test. c9997be</li> </ul> </li> </ul> <ul> <li>Fixed error handling with patching. f35864d</li> </ul> <ul> <li>Fixed Exception handling for click. c481ad7</li> </ul> <ul> <li>Fixed _copy_without_render bug. 4edc4bf</li> </ul> <ul> <li>Fixed test type annotation. 4a4a7c0</li> </ul> <ul> <li>Fixed rendering layers from previous commits. 0fefdbc</li> </ul> <ul> <li>Fixed issue with generate_prompt_context. 4756660</li> </ul> <ul> <li> <p>Fixed issue with determining rendered layer names. 06bad39</p> <p>Added <code>get_template_rendered_name</code> to proactively determine the name of the rendered template. - Fixed resiliency issue with git template repos. a9bb80d</p> <p>Provided better error checking for bad cached repos. - Fixed issue with relative paths in local files. 7f1b354</p> <p>You can pass a local_path to use to resolve relative local paths for I/O and template determination. - Fixed data merge organization. 4bba0f4</p> <ul> <li>Moved data merge constants and functions from composition.py to data_merge.py</li> </ul> </li> </ul> <ul> <li>Added new workflow for versioning. 2232682</li> </ul> <ul> <li>Added context managers for temporary copies. 90fa24c</li> </ul> <ul> <li>Added convenience functions to the template classes. 0b62c44</li> </ul> <ul> <li>Added interface to get template repositories. cf9ff4a</li> </ul> <ul> <li>Added git template repositories. 02bf112</li> </ul> <ul> <li>Added zipfile template repositories. 8190cb6</li> </ul> <ul> <li>Added git shortcuts for cloning. 6ad76a3</li> </ul>"},{"location":"changelog/#new","title":"New","text":""},{"location":"changelog/#other_1","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 86a2c04</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.3 \u2192 v0.2.0</p> </li> </ul> <ul> <li> <p>Bump gitpython from 3.1.40 to 3.1.41 in /requirements. 119c786</p> <p>Bumps gitpython from 3.1.40 to 3.1.41. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: gitpython dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Bump jinja2 from 3.1.2 to 3.1.3 in /requirements. 100a239</p> <p>Bumps jinja2 from 3.1.2 to 3.1.3. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: jinja2 dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Bump aiohttp from 3.8.6 to 3.9.2 in /requirements. 4b2a9df</p> <p>Bumps aiohttp from 3.8.6 to 3.9.2. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: aiohttp dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li>Moved <code>get_context_for_layer</code> from utils.py to composition.py. 6641a91</li> </ul> <ul> <li>Moved <code>get_template_name</code> tests. 1c0c054</li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. db151ef</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.0.290</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 7335d97</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.0.292</p> </li> </ul> <ul> <li> <p>Bump urllib3 from 2.0.4 to 2.0.7 in /requirements. 6f5dd07</p> <p>Bumps urllib3 from 2.0.4 to 2.0.7. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: urllib3 dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 94b1833</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.1.3</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. bc33fbd</p> <p>updates: - https://github.com/charliermarsh/ruff-pre-commit \u2192 https://github.com/astral-sh/ruff-pre-commit</p> </li> </ul>"},{"location":"changelog/#updates_1","title":"Updates","text":"<ul> <li>Updated requirement lock files. 026cd2d</li> </ul> <ul> <li>Updated pre-commit config. 57d6cff</li> </ul> <ul> <li>Updated requirements. 8d83ba0</li> </ul> <ul> <li>Updated tests. 5d3c51f</li> </ul> <ul> <li>Renamed <code>zipfile_repo.unzip</code> to <code>cache_source</code>. 60a2393</li> </ul> <ul> <li>Updated commands to use refactored methods. 14d2781</li> </ul> <ul> <li>Refactored (de)serialization and I/O methods into <code>io</code> module. 3c64a3e</li> </ul> <ul> <li> <p>Refactored <code>layers</code>. e8af7d5</p> <ul> <li>Integrated <code>Template</code> with <code>LayerConfig</code>     - <code>template</code> attribute is now a <code>Template</code> instance     - removed <code>directory</code>, <code>checkout</code>, <code>password</code>, and <code>commit</code>     - renamed <code>context</code> to <code>initial_context</code> to distiguish it from the <code>Template</code>\u2019s context</li> <li>Updated <code>RenderedLayer</code> to use templates     - renamed <code>new_context</code> to <code>rendered_context</code> to better describe it.     - renamed <code>latest_commit</code> to <code>rendered_commit</code> for better clarity     - added <code>latest_commit</code> convenience function</li> <li>Simplified <code>render_layer</code> using the new template functions</li> <li>Removed get_latest_template_commit from git_commands. af84ff4</li> </ul> <p>It is now part of the template repo - Updated requirements to use Pydantic 2. b24a158</p> </li> </ul> <ul> <li>Refactored layer context to fix #39. 300578f</li> </ul>"},{"location":"changelog/#0110-2023-07-27","title":"0.11.0 (2023-07-27)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_2","title":"Fixes","text":"<ul> <li>Fix test coverage matrix. 5ef8815</li> </ul> <ul> <li>Fix pre-commit from autofixing templates. 99e7dfb</li> </ul> <ul> <li>Fixed typing hints. ff695e3</li> </ul>"},{"location":"changelog/#new_1","title":"New","text":"<ul> <li>Added support for local extensions. 838f25c</li> </ul> <ul> <li> <p>Added <code>-o</code> and <code>--output-dir</code> as an alias. 04f063d</p> <p>It is now an alias for <code>-d</code> and <code>--destination</code></p> </li> </ul> <ul> <li> <p>Revert \u201c[pre-commit.ci] auto fixes from pre-commit.com hooks\u201d. 42d8704</p> <p>This reverts commit 52772f1352d6130b2d6189bf632b26fb9732c13f. - [pre-commit.ci] auto fixes from pre-commit.com hooks. 52772f1</p> <p>for more information, see https://pre-commit.ci - Migrated from setup.cfg to pyproject.toml. b3a39f0</p> </li> </ul> <ul> <li> <p>Bump aiohttp from 3.8.3 to 3.8.5 in /requirements. 0392ef7</p> <p>Bumps aiohttp from 3.8.3 to 3.8.5. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: aiohttp dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 83d1217</p> <p>updates: - github.com/psf/black: 23.3.0 \u2192 23.7.0</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. c58fe42</p> <p>updates: - github.com/psf/black: 23.3.0 \u2192 23.7.0</p> </li> </ul>"},{"location":"changelog/#other_2","title":"Other","text":""},{"location":"changelog/#0103-2023-05-15","title":"0.10.3 (2023-05-15)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_2","title":"New","text":"<ul> <li>Added support for accepting hooks. 096dfcc</li> </ul>"},{"location":"changelog/#0102-2023-05-11","title":"0.10.2 (2023-05-11)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_3","title":"Fixes","text":"<ul> <li>Fixed a bug that reformatted files that should be overwritten. 3f0f7b5</li> </ul>"},{"location":"changelog/#0101-2023-05-10","title":"0.10.1 (2023-05-10)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_4","title":"Fixes","text":"<ul> <li>Fixed a bug where additional context wasn\u2019t passed to the composition. bd8b571</li> </ul>"},{"location":"changelog/#other_3","title":"Other","text":"<ul> <li> <p>Bump markdown-it-py from 2.1.0 to 2.2.0 in /requirements. 65a4863</p> <p>Bumps markdown-it-py from 2.1.0 to 2.2.0. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: markdown-it-py dependency-type: indirect</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 21eca93</p> <p>updates: - github.com/psf/black: 23.1.0 \u2192 23.3.0</p> </li> </ul>"},{"location":"changelog/#0100-2023-03-24","title":"0.10.0 (2023-03-24)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_3","title":"New","text":"<ul> <li> <p>Added relative directory support for compositions. 02fa5b8</p> <ul> <li>Template paths or URLs are resolved using the path to the composition file.</li> <li>Using an absolute path or URL as a template works as before</li> <li><code>.</code>, <code>..</code>, and relative paths (non-<code>/</code> prefixed) are resolved with <code>urllib.parse.urljoin</code></li> </ul> </li> </ul>"},{"location":"changelog/#092-2023-02-13","title":"0.9.2 (2023-02-13)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_4","title":"New","text":"<ul> <li>Added test for validate_context_params. a52d28d</li> </ul> <ul> <li>Added ability to pass initial contexts. 9e3cdf3</li> </ul>"},{"location":"changelog/#updates_2","title":"Updates","text":"<ul> <li> <p>Modified CLI options and arguments. 02a4bf3</p> <ul> <li>The <code>output_dir</code> argument was moved to the <code>--destination</code> option.</li> <li>Added <code>CONTEXT_PARAMS</code> argument for initial context</li> <li>Removed checkout from first commit when linking. f2725ef</li> </ul> <ul> <li>The first commit was causing confusing issues and now a normal checkout is performed.</li> </ul> </li> </ul>"},{"location":"changelog/#091-2023-02-08","title":"0.9.1 (2023-02-08)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_5","title":"New","text":"<ul> <li>Added <code>--version</code> option. 4b1b9e1</li> </ul>"},{"location":"changelog/#090-2023-01-25","title":"0.9.0 (2023-01-25)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_5","title":"Fixes","text":"<ul> <li>Fixed license and documentation badges. 37289c9</li> </ul> <ul> <li>Fixed the coveralls badge in README. a4eaf73</li> </ul>"},{"location":"changelog/#new_6","title":"New","text":"<ul> <li>Added testing for authentication.py. 73c8335</li> </ul> <ul> <li>Added authentication capability. 19b5a8d</li> </ul>"},{"location":"changelog/#other_4","title":"Other","text":"<ul> <li>Switched to Codecov. c2fb125</li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 1f5320a</p> <p>updates: - github.com/pycqa/pydocstyle: 6.1.1 \u2192 6.2.3</p> </li> </ul>"},{"location":"changelog/#updates_3","title":"Updates","text":"<ul> <li>Updated documentation. 1a1c1f6</li> </ul> <ul> <li>Update README.md coveralls badge. b105133</li> </ul> <ul> <li>Update README.md. a55a257</li> </ul>"},{"location":"changelog/#081-2023-01-04","title":"0.8.1 (2023-01-04)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_6","title":"Fixes","text":"<ul> <li>Fixed YAML merge formatting. 7259919</li> </ul>"},{"location":"changelog/#other_5","title":"Other","text":"<ul> <li> <p>Bump wheel from 0.37.1 to 0.38.1 in /requirements. cab9b8e</p> <p>Bumps wheel from 0.37.1 to 0.38.1. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: wheel dependency-type: indirect</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 45e8596</p> <p>updates: - github.com/PyCQA/isort: v5.11.3 \u2192 5.11.4</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 550e0cb</p> <p>updates: - github.com/PyCQA/isort: 5.10.1 \u2192 v5.11.3</p> </li> </ul>"},{"location":"changelog/#080-2022-12-16","title":"0.8.0 (2022-12-16)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_7","title":"Fixes","text":"<ul> <li>Fixed ability to merge a list of dicts in YAML. f3698ef</li> </ul>"},{"location":"changelog/#other_6","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 5b21a40</p> <p>updates: - github.com/psf/black: 22.10.0 \u2192 22.12.0</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 0f5c7a5</p> <p>updates: - github.com/pre-commit/pre-commit-hooks: v4.3.0 \u2192 v4.4.0</p> </li> </ul>"},{"location":"changelog/#updates_4","title":"Updates","text":"<ul> <li>Change frozendict to immutabledict. 8edf699</li> </ul> <ul> <li> <p>Changed JSON library to orjson. c857a2f</p> <ul> <li>has better serialization capability and performance.</li> </ul> </li> </ul>"},{"location":"changelog/#071-2022-11-07","title":"0.7.1 (2022-11-07)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_8","title":"Fixes","text":"<ul> <li>Fixed ability to merge a list of dicts. 21b9033</li> </ul> <ul> <li>Fixed chrobinson email to me. 7f2bf8e</li> </ul>"},{"location":"changelog/#070-2022-10-31","title":"0.7.0 (2022-10-31)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_7","title":"New","text":"<ul> <li>Added ability to merge .toml files. 2e36b40</li> </ul> <ul> <li>Added ability to merge .ini and .cfg files. 31ff1e0</li> </ul>"},{"location":"changelog/#other_7","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. a31eeef</p> <p>updates: - github.com/psf/black: 22.8.0 \u2192 22.10.0</p> </li> </ul>"},{"location":"changelog/#060-2022-10-09","title":"0.6.0 (2022-10-09)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_9","title":"Fixes","text":"<ul> <li>Fixed a typo in the docs. 986f0d8</li> </ul> <ul> <li>Fixed dependency conflict between flake8 and virtualenv. 6925b05</li> </ul>"},{"location":"changelog/#new_8","title":"New","text":"<ul> <li>Added the link command to apply a composition to an existing project. 03f723e</li> </ul>"},{"location":"changelog/#updates_5","title":"Updates","text":"<ul> <li>Updated the update command to use <code>git diff</code> and <code>git apply</code>. d4bc14f</li> </ul> <ul> <li>Updated the project requirements. 0834e0b</li> </ul> <ul> <li>Refactored getting a composition from an input. 2f8edfe</li> </ul>"},{"location":"changelog/#050-2022-09-22","title":"0.5.0 (2022-09-22)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_9","title":"New","text":"<ul> <li> <p>Added the update subcommand. 6696589</p> <ul> <li>Made the existing implementation idempotent</li> <li>Connected the update_cmd to the command line</li> <li>Add very basic cli tests. c6482d4</li> </ul> </li> </ul>"},{"location":"changelog/#other_8","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. e5425d5</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. dbfde0a</p> <p>updates: - github.com/psf/black: 22.6.0 \u2192 22.8.0</p> </li> </ul>"},{"location":"changelog/#updates_6","title":"Updates","text":"<ul> <li>Update cli.py. 5a50f14</li> </ul>"},{"location":"changelog/#040-2022-09-06","title":"0.4.0 (2022-09-06)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_10","title":"New","text":"<ul> <li>Added subset of cookiecutter options to CLI. a66f17a</li> </ul> <ul> <li>Added documentation images. 86113dc</li> </ul> <ul> <li>Added template layer updating. 20c6fe3</li> </ul> <ul> <li>Added layer naming convention. 5e61312</li> </ul>"},{"location":"changelog/#other_9","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e516a18</p> <p>updates: - github.com/PyCQA/flake8: 4.0.1 \u2192 5.0.4</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 3e6f695</p> <p>updates: - github.com/psf/black: 22.3.0 \u2192 22.6.0</p> </li> </ul>"},{"location":"changelog/#updates_7","title":"Updates","text":"<ul> <li>Updated documentation configuration. a4c9652</li> </ul> <ul> <li>Updated README.md. a7ead0d</li> </ul>"},{"location":"changelog/#030-2022-06-29","title":"0.3.0 (2022-06-29)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_10","title":"Fixes","text":"<ul> <li>Fixed metadata\u2019s long description content type. 99470e9</li> </ul>"},{"location":"changelog/#other_10","title":"Other","text":"<ul> <li>Created tests for the add command. 358e189</li> </ul>"},{"location":"changelog/#updates_8","title":"Updates","text":"<ul> <li>Updated cc_override\u2019s tests. 5388df7</li> </ul>"},{"location":"changelog/#022-2022-06-26","title":"0.2.2 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_11","title":"New","text":"<ul> <li>Added badges to the readme. 9fdcad0</li> </ul>"},{"location":"changelog/#021-2022-06-26","title":"0.2.1 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_11","title":"Fixes","text":"<ul> <li>Fixed minor issues with packaging tools. d0f49d4</li> </ul>"},{"location":"changelog/#020-2022-06-26","title":"0.2.0 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_12","title":"Fixes","text":"<ul> <li> <p>Fixed add command requiring destination. 15cbd16</p> <p>The destination of the add command is now optional and defaults to the current working directory. - Fixed error not writing commit to composition file. 8fd7bbe</p> </li> </ul> <ul> <li>Fixed handling remote compositions and git clones. ee142bd</li> </ul> <ul> <li> <p>Fixed a bug when two templates have <code>_copy_without_render</code>. 9e89347</p> <p><code>_copy_without_render</code> is template-specific and attempting to override it raises an error in cookiecutter. Now that key is deleted for the default context and full context when generating each layer. - Fixed configurations. df365df</p> </li> </ul>"},{"location":"changelog/#new_12","title":"New","text":"<ul> <li>Added more github actions. 6bf5e54</li> </ul> <ul> <li>Added ability to use previous templatee contexts in rendering defaults. fa6cb23</li> </ul> <ul> <li>Added verbosity logging. 2081e30</li> </ul> <ul> <li>Added pip-compile to pre-commit config. aae79f5</li> </ul> <ul> <li>Added the \u201cadd\u201d command to add a layer to a rendered template. 86f17cd</li> </ul> <ul> <li> <p>Added git commands. 291b9aa</p> <ul> <li>gitpython added as a prod requirement</li> <li>GitError raised when git command fails</li> <li>added functions encompassing key functionality</li> <li>Added layer_name to RenderedLayer. 7f02db3</li> </ul> <p>This allows for detection of multiple rendered directories, and proper writing of the composition file. - Added release tooling. d0646d3</p> </li> </ul> <ul> <li>Added code. ccc4745</li> </ul>"},{"location":"changelog/#other_11","title":"Other","text":"<ul> <li>Create python-publish.yml. 62830a3</li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 2dae846</p> <p>for more information, see https://pre-commit.ci - Excluding test fixtures from requirement fixing. 40293a9</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. b774ad1</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 5098fde</p> <p>updates: - github.com/pre-commit/pre-commit-hooks: v4.2.0 \u2192 v4.3.0</p> </li> </ul> <ul> <li>Switched from typer to click. d66f3f0</li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 63f2d7d</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 8f6d661</p> <p>updates: - https://github.com/timothycrosley/isort \u2192 https://github.com/PyCQA/isort</p> </li> </ul> <ul> <li>Migrated dependency management to pip-tools. 438c1a3</li> </ul> <ul> <li>Vendored cookiecutter to use the latest version. e6540e7</li> </ul>"},{"location":"changelog/#updates_9","title":"Updates","text":"<ul> <li>Updated the readme. e997618</li> </ul> <ul> <li>Updated the documentation. 8b59661</li> </ul> <ul> <li>Updated pre-commit to allow multiple documents in YAML files. 3a3e578</li> </ul> <ul> <li>Removed vendored cookiecutter and switched to released version. f5cd36a</li> </ul> <ul> <li>Updated the error text when missing a git repo. 78507e9</li> </ul> <ul> <li>Updated formatting for composition output. 9df7856</li> </ul> <ul> <li>Updated the documentation to a new theme. 5f68737</li> </ul> <ul> <li>Renamed _commands to commands. da6d4f5</li> </ul> <ul> <li>Changed MergeStrategy from an Enum to constants. ef8b828</li> </ul> <ul> <li> <p>Changed dependency management. 4cf52ba</p> <p>Uses pip-tools to compile and maintain dependency information. - Updated tests. 7c81df5</p> </li> </ul>"},{"location":"changelog/#010-2022-02-28","title":"0.1.0 (2022-02-28)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#other_12","title":"Other","text":"<ul> <li>Initial commit. abdef79</li> </ul> <ul> <li>Initial commit. 8965b8a</li> </ul>"},{"location":"changelog/#0120-2023-11-04","title":"0.12.0 (2023-11-04)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_13","title":"Fixes","text":"<ul> <li> <p>Fixed git worktree issue. e27636c</p> <ul> <li>uses the correct git command depending on the parameters passed.</li> <li>Fixed missing commit sha in test. c9997be</li> </ul> </li> </ul> <ul> <li>Fixed error handling with patching. f35864d</li> </ul> <ul> <li>Fixed Exception handling for click. c481ad7</li> </ul> <ul> <li>Fixed _copy_without_render bug. 4edc4bf</li> </ul> <ul> <li>Fixed test type annotation. 4a4a7c0</li> </ul> <ul> <li>Fixed rendering layers from previous commits. 0fefdbc</li> </ul> <ul> <li>Fixed issue with generate_prompt_context. 4756660</li> </ul> <ul> <li> <p>Fixed issue with determining rendered layer names. 06bad39</p> <p>Added <code>get_template_rendered_name</code> to proactively determine the name of the rendered template. - Fixed resiliency issue with git template repos. a9bb80d</p> <p>Provided better error checking for bad cached repos. - Fixed issue with relative paths in local files. 7f1b354</p> <p>You can pass a local_path to use to resolve relative local paths for I/O and template determination. - Fixed data merge organization. 4bba0f4</p> <ul> <li>Moved data merge constants and functions from composition.py to data_merge.py</li> </ul> </li> </ul> <ul> <li>Added new workflow for versioning. 2232682</li> </ul> <ul> <li>Added context managers for temporary copies. 90fa24c</li> </ul> <ul> <li>Added convenience functions to the template classes. 0b62c44</li> </ul> <ul> <li>Added interface to get template repositories. cf9ff4a</li> </ul> <ul> <li>Added git template repositories. 02bf112</li> </ul> <ul> <li>Added zipfile template repositories. 8190cb6</li> </ul> <ul> <li>Added git shortcuts for cloning. 6ad76a3</li> </ul>"},{"location":"changelog/#new_13","title":"New","text":""},{"location":"changelog/#other_13","title":"Other","text":"<ul> <li>Moved <code>get_context_for_layer</code> from utils.py to composition.py. 6641a91</li> </ul> <ul> <li>Moved <code>get_template_name</code> tests. 1c0c054</li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. db151ef</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.0.290</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 7335d97</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.0.292</p> </li> </ul> <ul> <li> <p>Bump urllib3 from 2.0.4 to 2.0.7 in /requirements. 6f5dd07</p> <p>Bumps urllib3 from 2.0.4 to 2.0.7. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: urllib3 dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 94b1833</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.287 \u2192 v0.1.3</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. bc33fbd</p> <p>updates: - https://github.com/charliermarsh/ruff-pre-commit \u2192 https://github.com/astral-sh/ruff-pre-commit</p> </li> </ul>"},{"location":"changelog/#updates_10","title":"Updates","text":"<ul> <li>Updated requirement lock files. 026cd2d</li> </ul> <ul> <li>Updated pre-commit config. 57d6cff</li> </ul> <ul> <li>Updated requirements. 8d83ba0</li> </ul> <ul> <li>Updated tests. 5d3c51f</li> </ul> <ul> <li>Renamed <code>zipfile_repo.unzip</code> to <code>cache_source</code>. 60a2393</li> </ul> <ul> <li>Updated commands to use refactored methods. 14d2781</li> </ul> <ul> <li>Refactored (de)serialization and I/O methods into <code>io</code> module. 3c64a3e</li> </ul> <ul> <li> <p>Refactored <code>layers</code>. e8af7d5</p> <ul> <li>Integrated <code>Template</code> with <code>LayerConfig</code>     - <code>template</code> attribute is now a <code>Template</code> instance     - removed <code>directory</code>, <code>checkout</code>, <code>password</code>, and <code>commit</code>     - renamed <code>context</code> to <code>initial_context</code> to distiguish it from the <code>Template</code>\u2019s context</li> <li>Updated <code>RenderedLayer</code> to use templates     - renamed <code>new_context</code> to <code>rendered_context</code> to better describe it.     - renamed <code>latest_commit</code> to <code>rendered_commit</code> for better clarity     - added <code>latest_commit</code> convenience function</li> <li>Simplified <code>render_layer</code> using the new template functions</li> <li>Removed get_latest_template_commit from git_commands. af84ff4</li> </ul> <p>It is now part of the template repo - Updated requirements to use Pydantic 2. b24a158</p> </li> </ul> <ul> <li>Refactored layer context to fix #39. 300578f</li> </ul>"},{"location":"changelog/#0110-2023-07-27_1","title":"0.11.0 (2023-07-27)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_14","title":"Fixes","text":"<ul> <li>Fix test coverage matrix. 5ef8815</li> </ul> <ul> <li>Fix pre-commit from autofixing templates. 99e7dfb</li> </ul> <ul> <li>Fixed typing hints. ff695e3</li> </ul>"},{"location":"changelog/#new_14","title":"New","text":"<ul> <li>Added support for local extensions. 838f25c</li> </ul> <ul> <li> <p>Added <code>-o</code> and <code>--output-dir</code> as an alias. 04f063d</p> <p>It is now an alias for <code>-d</code> and <code>--destination</code></p> </li> </ul> <ul> <li> <p>Revert \u201c[pre-commit.ci] auto fixes from pre-commit.com hooks\u201d. 42d8704</p> <p>This reverts commit 52772f1352d6130b2d6189bf632b26fb9732c13f. - [pre-commit.ci] auto fixes from pre-commit.com hooks. 52772f1</p> <p>for more information, see https://pre-commit.ci - Migrated from setup.cfg to pyproject.toml. b3a39f0</p> </li> </ul> <ul> <li> <p>Bump aiohttp from 3.8.3 to 3.8.5 in /requirements. 0392ef7</p> <p>Bumps aiohttp from 3.8.3 to 3.8.5. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: aiohttp dependency-type: direct:production</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 83d1217</p> <p>updates: - github.com/psf/black: 23.3.0 \u2192 23.7.0</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. c58fe42</p> <p>updates: - github.com/psf/black: 23.3.0 \u2192 23.7.0</p> </li> </ul>"},{"location":"changelog/#other_14","title":"Other","text":""},{"location":"changelog/#0103-2023-05-15_1","title":"0.10.3 (2023-05-15)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_15","title":"New","text":"<ul> <li>Added support for accepting hooks. 096dfcc</li> </ul>"},{"location":"changelog/#0102-2023-05-11_1","title":"0.10.2 (2023-05-11)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_15","title":"Fixes","text":"<ul> <li>Fixed a bug that reformatted files that should be overwritten. 3f0f7b5</li> </ul>"},{"location":"changelog/#0101-2023-05-10_1","title":"0.10.1 (2023-05-10)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_16","title":"Fixes","text":"<ul> <li>Fixed a bug where additional context wasn\u2019t passed to the composition. bd8b571</li> </ul>"},{"location":"changelog/#other_15","title":"Other","text":"<ul> <li> <p>Bump markdown-it-py from 2.1.0 to 2.2.0 in /requirements. 65a4863</p> <p>Bumps markdown-it-py from 2.1.0 to 2.2.0. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: markdown-it-py dependency-type: indirect</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 21eca93</p> <p>updates: - github.com/psf/black: 23.1.0 \u2192 23.3.0</p> </li> </ul>"},{"location":"changelog/#0100-2023-03-24_1","title":"0.10.0 (2023-03-24)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_16","title":"New","text":"<ul> <li> <p>Added relative directory support for compositions. 02fa5b8</p> <ul> <li>Template paths or URLs are resolved using the path to the composition file.</li> <li>Using an absolute path or URL as a template works as before</li> <li><code>.</code>, <code>..</code>, and relative paths (non-<code>/</code> prefixed) are resolved with <code>urllib.parse.urljoin</code></li> </ul> </li> </ul>"},{"location":"changelog/#092-2023-02-13_1","title":"0.9.2 (2023-02-13)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_17","title":"New","text":"<ul> <li>Added test for validate_context_params. a52d28d</li> </ul> <ul> <li>Added ability to pass initial contexts. 9e3cdf3</li> </ul>"},{"location":"changelog/#updates_11","title":"Updates","text":"<ul> <li> <p>Modified CLI options and arguments. 02a4bf3</p> <ul> <li>The <code>output_dir</code> argument was moved to the <code>--destination</code> option.</li> <li>Added <code>CONTEXT_PARAMS</code> argument for initial context</li> <li>Removed checkout from first commit when linking. f2725ef</li> </ul> <ul> <li>The first commit was causing confusing issues and now a normal checkout is performed.</li> </ul> </li> </ul>"},{"location":"changelog/#091-2023-02-08_1","title":"0.9.1 (2023-02-08)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_18","title":"New","text":"<ul> <li>Added <code>--version</code> option. 4b1b9e1</li> </ul>"},{"location":"changelog/#090-2023-01-25_1","title":"0.9.0 (2023-01-25)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_17","title":"Fixes","text":"<ul> <li>Fixed license and documentation badges. 37289c9</li> </ul> <ul> <li>Fixed the coveralls badge in README. a4eaf73</li> </ul>"},{"location":"changelog/#new_19","title":"New","text":"<ul> <li>Added testing for authentication.py. 73c8335</li> </ul> <ul> <li>Added authentication capability. 19b5a8d</li> </ul>"},{"location":"changelog/#other_16","title":"Other","text":"<ul> <li>Switched to Codecov. c2fb125</li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 1f5320a</p> <p>updates: - github.com/pycqa/pydocstyle: 6.1.1 \u2192 6.2.3</p> </li> </ul>"},{"location":"changelog/#updates_12","title":"Updates","text":"<ul> <li>Updated documentation. 1a1c1f6</li> </ul> <ul> <li>Update README.md coveralls badge. b105133</li> </ul> <ul> <li>Update README.md. a55a257</li> </ul>"},{"location":"changelog/#081-2023-01-04_1","title":"0.8.1 (2023-01-04)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_18","title":"Fixes","text":"<ul> <li>Fixed YAML merge formatting. 7259919</li> </ul>"},{"location":"changelog/#other_17","title":"Other","text":"<ul> <li> <p>Bump wheel from 0.37.1 to 0.38.1 in /requirements. cab9b8e</p> <p>Bumps wheel from 0.37.1 to 0.38.1. - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: wheel dependency-type: indirect</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 45e8596</p> <p>updates: - github.com/PyCQA/isort: v5.11.3 \u2192 5.11.4</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 550e0cb</p> <p>updates: - github.com/PyCQA/isort: 5.10.1 \u2192 v5.11.3</p> </li> </ul>"},{"location":"changelog/#080-2022-12-16_1","title":"0.8.0 (2022-12-16)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_19","title":"Fixes","text":"<ul> <li>Fixed ability to merge a list of dicts in YAML. f3698ef</li> </ul>"},{"location":"changelog/#other_18","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 5b21a40</p> <p>updates: - github.com/psf/black: 22.10.0 \u2192 22.12.0</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 0f5c7a5</p> <p>updates: - github.com/pre-commit/pre-commit-hooks: v4.3.0 \u2192 v4.4.0</p> </li> </ul>"},{"location":"changelog/#updates_13","title":"Updates","text":"<ul> <li>Change frozendict to immutabledict. 8edf699</li> </ul> <ul> <li> <p>Changed JSON library to orjson. c857a2f</p> <ul> <li>has better serialization capability and performance.</li> </ul> </li> </ul>"},{"location":"changelog/#071-2022-11-07_1","title":"0.7.1 (2022-11-07)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_20","title":"Fixes","text":"<ul> <li>Fixed ability to merge a list of dicts. 21b9033</li> </ul> <ul> <li>Fixed chrobinson email to me. 7f2bf8e</li> </ul>"},{"location":"changelog/#070-2022-10-31_1","title":"0.7.0 (2022-10-31)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_20","title":"New","text":"<ul> <li>Added ability to merge .toml files. 2e36b40</li> </ul> <ul> <li>Added ability to merge .ini and .cfg files. 31ff1e0</li> </ul>"},{"location":"changelog/#other_19","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. a31eeef</p> <p>updates: - github.com/psf/black: 22.8.0 \u2192 22.10.0</p> </li> </ul>"},{"location":"changelog/#060-2022-10-09_1","title":"0.6.0 (2022-10-09)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_21","title":"Fixes","text":"<ul> <li>Fixed a typo in the docs. 986f0d8</li> </ul> <ul> <li>Fixed dependency conflict between flake8 and virtualenv. 6925b05</li> </ul>"},{"location":"changelog/#new_21","title":"New","text":"<ul> <li>Added the link command to apply a composition to an existing project. 03f723e</li> </ul>"},{"location":"changelog/#updates_14","title":"Updates","text":"<ul> <li>Updated the update command to use <code>git diff</code> and <code>git apply</code>. d4bc14f</li> </ul> <ul> <li>Updated the project requirements. 0834e0b</li> </ul> <ul> <li>Refactored getting a composition from an input. 2f8edfe</li> </ul>"},{"location":"changelog/#050-2022-09-22_1","title":"0.5.0 (2022-09-22)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_22","title":"New","text":"<ul> <li> <p>Added the update subcommand. 6696589</p> <ul> <li>Made the existing implementation idempotent</li> <li>Connected the update_cmd to the command line</li> <li>Add very basic cli tests. c6482d4</li> </ul> </li> </ul>"},{"location":"changelog/#other_20","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. e5425d5</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. dbfde0a</p> <p>updates: - github.com/psf/black: 22.6.0 \u2192 22.8.0</p> </li> </ul>"},{"location":"changelog/#updates_15","title":"Updates","text":"<ul> <li>Update cli.py. 5a50f14</li> </ul>"},{"location":"changelog/#040-2022-09-06_1","title":"0.4.0 (2022-09-06)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_23","title":"New","text":"<ul> <li>Added subset of cookiecutter options to CLI. a66f17a</li> </ul> <ul> <li>Added documentation images. 86113dc</li> </ul> <ul> <li>Added template layer updating. 20c6fe3</li> </ul> <ul> <li>Added layer naming convention. 5e61312</li> </ul>"},{"location":"changelog/#other_21","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e516a18</p> <p>updates: - github.com/PyCQA/flake8: 4.0.1 \u2192 5.0.4</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 3e6f695</p> <p>updates: - github.com/psf/black: 22.3.0 \u2192 22.6.0</p> </li> </ul>"},{"location":"changelog/#updates_16","title":"Updates","text":"<ul> <li>Updated documentation configuration. a4c9652</li> </ul> <ul> <li>Updated README.md. a7ead0d</li> </ul>"},{"location":"changelog/#030-2022-06-29_1","title":"0.3.0 (2022-06-29)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_22","title":"Fixes","text":"<ul> <li>Fixed metadata\u2019s long description content type. 99470e9</li> </ul>"},{"location":"changelog/#other_22","title":"Other","text":"<ul> <li>Created tests for the add command. 358e189</li> </ul>"},{"location":"changelog/#updates_17","title":"Updates","text":"<ul> <li>Updated cc_override\u2019s tests. 5388df7</li> </ul>"},{"location":"changelog/#022-2022-06-26_1","title":"0.2.2 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#new_24","title":"New","text":"<ul> <li>Added badges to the readme. 9fdcad0</li> </ul>"},{"location":"changelog/#021-2022-06-26_1","title":"0.2.1 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_23","title":"Fixes","text":"<ul> <li>Fixed minor issues with packaging tools. d0f49d4</li> </ul>"},{"location":"changelog/#020-2022-06-26_1","title":"0.2.0 (2022-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"changelog/#fixes_24","title":"Fixes","text":"<ul> <li> <p>Fixed add command requiring destination. 15cbd16</p> <p>The destination of the add command is now optional and defaults to the current working directory. - Fixed error not writing commit to composition file. 8fd7bbe</p> </li> </ul> <ul> <li>Fixed handling remote compositions and git clones. ee142bd</li> </ul> <ul> <li> <p>Fixed a bug when two templates have <code>_copy_without_render</code>. 9e89347</p> <p><code>_copy_without_render</code> is template-specific and attempting to override it raises an error in cookiecutter. Now that key is deleted for the default context and full context when generating each layer. - Fixed configurations. df365df</p> </li> </ul>"},{"location":"changelog/#new_25","title":"New","text":"<ul> <li>Added more github actions. 6bf5e54</li> </ul> <ul> <li>Added ability to use previous templatee contexts in rendering defaults. fa6cb23</li> </ul> <ul> <li>Added verbosity logging. 2081e30</li> </ul> <ul> <li>Added pip-compile to pre-commit config. aae79f5</li> </ul> <ul> <li>Added the \u201cadd\u201d command to add a layer to a rendered template. 86f17cd</li> </ul> <ul> <li> <p>Added git commands. 291b9aa</p> <ul> <li>gitpython added as a prod requirement</li> <li>GitError raised when git command fails</li> <li>added functions encompassing key functionality</li> <li>Added layer_name to RenderedLayer. 7f02db3</li> </ul> <p>This allows for detection of multiple rendered directories, and proper writing of the composition file. - Added release tooling. d0646d3</p> </li> </ul> <ul> <li>Added code. ccc4745</li> </ul>"},{"location":"changelog/#other_23","title":"Other","text":"<ul> <li>Create python-publish.yml. 62830a3</li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 2dae846</p> <p>for more information, see https://pre-commit.ci - Excluding test fixtures from requirement fixing. 40293a9</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. b774ad1</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 5098fde</p> <p>updates: - github.com/pre-commit/pre-commit-hooks: v4.2.0 \u2192 v4.3.0</p> </li> </ul> <ul> <li>Switched from typer to click. d66f3f0</li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 63f2d7d</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 8f6d661</p> <p>updates: - https://github.com/timothycrosley/isort \u2192 https://github.com/PyCQA/isort</p> </li> </ul> <ul> <li>Migrated dependency management to pip-tools. 438c1a3</li> </ul> <ul> <li>Vendored cookiecutter to use the latest version. e6540e7</li> </ul>"},{"location":"changelog/#updates_18","title":"Updates","text":"<ul> <li>Updated the readme. e997618</li> </ul> <ul> <li>Updated the documentation. 8b59661</li> </ul> <ul> <li>Updated pre-commit to allow multiple documents in YAML files. 3a3e578</li> </ul> <ul> <li>Removed vendored cookiecutter and switched to released version. f5cd36a</li> </ul> <ul> <li>Updated the error text when missing a git repo. 78507e9</li> </ul> <ul> <li>Updated formatting for composition output. 9df7856</li> </ul> <ul> <li>Updated the documentation to a new theme. 5f68737</li> </ul> <ul> <li>Renamed _commands to commands. da6d4f5</li> </ul> <ul> <li>Changed MergeStrategy from an Enum to constants. ef8b828</li> </ul> <ul> <li> <p>Changed dependency management. 4cf52ba</p> <p>Uses pip-tools to compile and maintain dependency information. - Updated tests. 7c81df5</p> </li> </ul>"},{"location":"changelog/#010-2022-02-28_1","title":"0.1.0 (2022-02-28)","text":""},{"location":"changelog/#other_24","title":"Other","text":"<ul> <li>Initial commit. abdef79</li> </ul> <ul> <li>Initial commit. 8965b8a</li> </ul>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":""},{"location":"contributing/#getting-started-with-development","title":"Getting started with development","text":""},{"location":"contributing/#setup","title":"Setup","text":"<p>There are several ways to create your isolated environment. This is the default method.</p> <p>Run the following in a terminal:</p> <pre><code># Clone the repository\ngit clone https://github.com/coordt/cookie-composer.git\n\n# Enter the repository\ncd cookie-composer\n\n# Create then activate a virtual environment\npython -m venv venv\nsource venv/bin/activate\n\n# Install the development requirements\npython -m pip install -r requirements/dev.txt\n</code></pre>"},{"location":"contributing/#run-tests","title":"Run tests","text":"<p>Once setup, you should be able to run tests: <pre><code>pytest\n</code></pre></p>"},{"location":"contributing/#install-pre-commit-hooks","title":"Install Pre-commit Hooks","text":"<p>Pre-commit hooks are scripts that run every time you make a commit. If any of the scripts fail, it stops the commit. You can see a listing of the checks in the <code>.pre-commit-config.yaml</code> file.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installing-with-pipx","title":"Installing with pipx","text":"<pre><code>This is the recommended method for installing cookie composer because it works on all platforms and should require minimal effort.\n</code></pre> <p><code>pipx</code> is a tool to help you install and run end-user applications written in Python. It\u2019s roughly similar to macOS\u2019s <code>brew</code>, JavaScript\u2019s <code>npx</code>, and Linux\u2019s <code>apt</code>. <code>pipx</code> installs the application in an isolated Python environment yet still makes the app available in your shell.</p>"},{"location":"installation/#install-pipx","title":"Install pipx","text":"<p>The full instructions for installing <code>pipx</code> are on its website.</p>"},{"location":"installation/#install-cookie-composer","title":"Install cookie composer","text":"<p>With <code>pipx</code> installed, install <code>cookie-composer</code> by running:</p> <pre><code>$ pipx install cookie-composer\n</code></pre>"},{"location":"installation/#using-cookie-composer","title":"Using cookie composer","text":"<p>The <code>cookie-composer</code> command is available in your shell as any other command.</p>"},{"location":"installation/#installing-into-a-python-virtual-environment","title":"Installing into a Python virtual environment","text":"<pre><code>Installing cookie composer into a Python virtual environment, also known as a virtualenv or venv, means the command is only available while that environment is active.\n</code></pre> <pre><code>The instructions assume you already have Python installed.\n</code></pre>"},{"location":"installation/#create-the-virtual-environment","title":"Create the virtual environment","text":"<p>The full documentation on creating virtual environments gives a greater set of instructions. It will be something like running:</p> <pre><code>$ python3 -m venv /path/to/new/virtual/environment\n</code></pre>"},{"location":"installation/#activate-the-virtual-environment","title":"Activate the virtual environment","text":"<p>The method of activating the environment depends on the shell and are listed in the documentation. For bash or zsh it is:</p> <pre><code>$ source &lt;/path/to/new/virtual/environment&gt;/bin/activate\n</code></pre>"},{"location":"installation/#install-cookie-composer_1","title":"Install cookie composer","text":"<p>Once the virtual environment is activate, use <code>pip</code> to install <code>cookie-composer</code>:</p> <pre><code>$ python3 -m pip install cookie-composer\n</code></pre>"},{"location":"how-to/","title":"How To\u2026","text":""},{"location":"how-to/access-private-templates/","title":"Accessing templates in private repositories","text":"<p>Cookie composer can integrate with some third-party services in order to access private repositories.</p> <p>Note</p> <p>Currently only GitHub is supported.</p>"},{"location":"how-to/access-private-templates/#github","title":"GitHub","text":"<p>At your terminal, enter <code>cookie-composer auth login</code>:</p> <pre><code>$ cookie-composer auth login\nFirst copy your one-time code: A25E-0A58\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\nPress Enter to open github.com in your browser...\n</code></pre> <p>Copy the one-time code (<code>A25E-0A58</code> in this example), and press Enter or Return to open your browser to the correct page.</p> <p>You will arrive at a page similar to this:</p> <p></p> <p>Paste the code (or enter each character individually) and press the continue button.</p> <p>You will see an authorization page, similar to:</p> <p></p> <p>Press the \u201cAuthorize callowayproject\u201d button to allow cookie-composer read-only access to your repositories.</p> <p>Then you will see:</p> <p></p> <p>And you can close the browser window.</p> <p>Your terminal will now look like:</p> <pre><code>$ cookie-composer auth login\nFirst copy your one-time code: A25E-0A58\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\nPress Enter to open github.com in your browser...\nWaiting for authorization.............Authenticated to GitHub\n</code></pre> <p>Now when you provide any GitHub template link, Cookie Composer is able to access them as you with read-only access. </p>"},{"location":"reference/cli/","title":"cookie-composer","text":"<p>Render templates using composition.</p> <p>Usage:</p> <pre><code>cookie-composer [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>add: Add the template or configuration PATH_OR_URL to an existing project.</li> <li>auth: Authenticate cookie-composer to a service.</li> <li>create: Create a project from the template or configuration PATH_OR_URL in using optional [CONTEXT_PARAMS].</li> <li>link: Link an existing git repo to the template or composition PATH_OR_URL using optional [CONTEXT_PARAMS].</li> <li>update: Update the project to the latest version of each template.</li> </ul>"},{"location":"reference/cli/#cookie-composer-add","title":"cookie-composer add","text":"<p>Add the template or configuration PATH_OR_URL to an existing project.</p> <p>Usage:</p> <pre><code>cookie-composer add [OPTIONS] PATH_OR_URL [CONTEXT_PARAMS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbosity</code>, <code>-v</code> text Either CRITICAL, ERROR, WARNING, INFO or DEBUG <code>INFO</code> <code>--no-input</code> boolean Do not prompt for parameters and only use cookiecutter.json file content. Defaults to deleting any cached resources and redownloading them. <code>False</code> <code>-c</code>, <code>--checkout</code> text branch, tag or commit to checkout after git clone None <code>--directory</code> text Directory within repo that holds cookiecutter.json file for advanced repositories with multi templates in it None <code>-f</code>, <code>--overwrite-if-exists</code> boolean Overwrite the contents of the output directory if it already exists <code>False</code> <code>-s</code>, <code>--skip-if-file-exists</code> boolean Skip the files in the corresponding directories if they already exist <code>False</code> <code>--default-config</code> boolean Do not load a config file. Use the defaults instead <code>False</code> <code>-d</code>, <code>--destination</code> directory The directory to add the templates to. Defaults to the current working directory. <code>&lt;function &lt;lambda&gt; at 0x7f4e484b3370&gt;</code> <code>--accept-hooks</code> choice (<code>yes</code> | <code>ask</code> | <code>no</code> | <code>first</code> | <code>last</code> | <code>all</code> | <code>none</code>) Accept pre/host hooks <code>all</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#cookie-composer-auth","title":"cookie-composer auth","text":"<p>Authenticate cookie-composer to a service.</p> <p>Usage:</p> <pre><code>cookie-composer auth [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>login: Authenticate to a service.</li> <li>token: Print the auth token cookie-composer is configured to use.</li> </ul>"},{"location":"reference/cli/#cookie-composer-auth-login","title":"cookie-composer auth login","text":"<p>Authenticate to a service.</p> <p>Usage:</p> <pre><code>cookie-composer auth login [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-p</code>, <code>--git-protocol</code> choice (<code>https</code> | <code>ssh</code>) The protocol to use for git operations <code>https</code> <code>-h</code>, <code>--service</code> text The host name of the service to authenticate with <code>github.com</code> <code>-s</code>, <code>--scopes</code> text Additional authentication scopes to request None <code>--with-token</code> filename Read token from standard input None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#cookie-composer-auth-token","title":"cookie-composer auth token","text":"<p>Print the auth token cookie-composer is configured to use.</p> <p>Usage:</p> <pre><code>cookie-composer auth token [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>-h</code>, <code>--service</code> text The host name of the service to authenticate with <code>github.com</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#cookie-composer-create","title":"cookie-composer create","text":"<p>Create a project from the template or configuration PATH_OR_URL in using optional [CONTEXT_PARAMS].</p> <p>Usage:</p> <pre><code>cookie-composer create [OPTIONS] PATH_OR_URL [CONTEXT_PARAMS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--verbosity</code>, <code>-v</code> text Either CRITICAL, ERROR, WARNING, INFO or DEBUG <code>INFO</code> <code>--no-input</code> boolean Do not prompt for parameters and only use cookiecutter.json file content. Defaults to deleting any cached resources and redownloading them. <code>False</code> <code>-c</code>, <code>--checkout</code> text branch, tag or commit to checkout after git clone None <code>--directory</code> text Directory within repo that holds cookiecutter.json file for advanced repositories with multi templates in it None <code>-f</code>, <code>--overwrite-if-exists</code> boolean Overwrite the contents of the output directory if it already exists <code>False</code> <code>-s</code>, <code>--skip-if-file-exists</code> boolean Skip the files in the corresponding directories if they already exist <code>False</code> <code>--default-config</code> boolean Do not load a config file. Use the defaults instead <code>False</code> <code>-d</code>, <code>--destination</code>, <code>-o</code>, <code>--output-dir</code> directory The directory to render the templates to. Defaults to the current working directory. <code>&lt;function &lt;lambda&gt; at 0x7f4e484b3250&gt;</code> <code>--accept-hooks</code> choice (<code>yes</code> | <code>ask</code> | <code>no</code> | <code>first</code> | <code>last</code> | <code>all</code> | <code>none</code>) Accept pre/host hooks <code>all</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#cookie-composer-link","title":"cookie-composer link","text":"<p>Link an existing git repo to the template or composition PATH_OR_URL using optional [CONTEXT_PARAMS].</p> <p>Usage:</p> <pre><code>cookie-composer link [OPTIONS] PATH_OR_URL [CONTEXT_PARAMS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--no-input</code> boolean Do not prompt for parameters and only use cookiecutter.json file content. Defaults to deleting any cached resources and redownloading them. <code>False</code> <code>-c</code>, <code>--checkout</code> text branch, tag or commit to checkout after git clone None <code>--directory</code> text Directory within repo that holds cookiecutter.json file for advanced repositories with multi templates in it None <code>-f</code>, <code>--overwrite-if-exists</code> boolean Overwrite the contents of the output directory if it already exists <code>False</code> <code>-s</code>, <code>--skip-if-file-exists</code> boolean Skip the files in the corresponding directories if they already exist <code>False</code> <code>--default-config</code> boolean Do not load a config file. Use the defaults instead <code>False</code> <code>-d</code>, <code>--destination</code> directory The directory to link the template to. Defaults to the current working directory. <code>&lt;function &lt;lambda&gt; at 0x7f4e484b35b0&gt;</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#cookie-composer-update","title":"cookie-composer update","text":"<p>Update the project to the latest version of each template.</p> <p>Usage:</p> <pre><code>cookie-composer update [OPTIONS] [CONTEXT_PARAMS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--no-input</code> boolean Do not prompt for parameters and only use cookiecutter.json file content. Defaults to deleting any cached resources and re-downloading them. <code>False</code> <code>-d</code>, <code>--destination</code> directory The directory to update. Defaults to the current working directory. <code>&lt;function &lt;lambda&gt; at 0x7f4e484b3010&gt;</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/api/SUMMARY/","title":"SUMMARY","text":"<ul> <li> cookie_composer     *  authentication     *  cc_overrides     *  cli     *  commands         *  add         *  authn         *  create         *  link         *  update     *  composition     *  data_merge     *  diff     *  exceptions     *  git_commands     *  io     *  layers     *  matching     *  merge_files         *  ini_file         *  json_file         *  toml_file         *  yaml_file     *  templates         *  git_repo         *  source         *  types         *  zipfile_repo     *  utils</li> </ul>"},{"location":"reference/api/cookie_composer/","title":"Index","text":""},{"location":"reference/api/cookie_composer/authentication/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> authentication","text":"<p>OAuth2 authentication to access protected resources.</p>"},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication.add_auth_to_url","title":"add_auth_to_url","text":"<pre><code>add_auth_to_url(url: str) -&gt; str\n</code></pre> <p>Add authentication information to a URL.</p> <p>Parameters:</p> <code>url</code> <p>The URL to add authentication information to.</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>str</code> <p>The URL with authentication information added, or the original URL if no token is cached</p>"},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication.get_cached_token","title":"get_cached_token","text":"<pre><code>get_cached_token(account_name: str) -&gt; Optional[str]\n</code></pre> <p>Return the cached token for the account.</p>"},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication.get_hosts_file","title":"get_hosts_file","text":"<pre><code>get_hosts_file() -&gt; Path\n</code></pre> <p>Return the path to the hosts file.</p>"},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication.github_auth_device","title":"github_auth_device","text":"<pre><code>github_auth_device(n_polls: int = 9999) -&gt; Optional[str]\n</code></pre> <p>Authenticate with GitHub, polling up to <code>n_polls</code> times to wait for completion.</p>"},{"location":"reference/api/cookie_composer/authentication/#cookie_composer.authentication.login_to_svc","title":"login_to_svc","text":"<pre><code>login_to_svc(\n    service: Optional[str] = None,\n    protocol: Optional[str] = None,\n    scopes: Optional[str] = None,\n    token: Optional[str] = None,\n) -&gt; str\n</code></pre> <p>Log in and cache token.</p> <p>Parameters:</p> <code>service</code> <p>The name of the service to authenticate with</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>protocol</code> <p>The protocol to use for git operations</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>scopes</code> <p>Additional authentication scopes to request</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>token</code> <p>A specific token to use instead of logging in</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>str</code> <p>The token for the service</p>"},{"location":"reference/api/cookie_composer/cc_overrides/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cc_overrides","text":"<p>This overrides the default cookie cutter environment.</p>"},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides.CustomStrictEnvironment","title":"CustomStrictEnvironment","text":"<pre><code>CustomStrictEnvironment(**kwargs)\n</code></pre> <p>               Bases: <code>StrictEnvironment</code></p> <p>Create strict Jinja2 environment.</p> <p>Jinja2 environment will raise error on undefined variable in template-rendering context.</p> <p>Does not expect all the context to be under the <code>cookiecutter</code> key.</p>"},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides.JsonifyContextExtension","title":"JsonifyContextExtension","text":"<pre><code>JsonifyContextExtension(environment: Environment)\n</code></pre> <p>               Bases: <code>Extension</code></p> <p>Jinja2 extension to convert a Python object to JSON.</p>"},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides.jsonify_context","title":"jsonify_context","text":"<pre><code>jsonify_context(value: Any) -&gt; MutableMapping\n</code></pre> <p>Convert a <code>Context</code> to a dict.</p>"},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides.prompt_for_config","title":"prompt_for_config","text":"<pre><code>prompt_for_config(\n    prompts: dict,\n    aggregated_context: Context,\n    layer_context: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n    no_input: bool = False,\n) -&gt; MutableMapping[str, Any]\n</code></pre> <p>Prompt user to enter a new config using an existing config as a basis.</p> <p>Will not prompt for configurations already in the existing configuration.</p> <p>Prompts can refer to items in the existing config.</p> <p>Parameters:</p> <code>prompts</code> <p>A dictionary of configuration prompts and default values</p> <p> TYPE: <code>dict</code> </p> <code>aggregated_context</code> <p>An existing configuration to use as a basis</p> <p> TYPE: <code>Context</code> </p> <code>layer_context</code> <p>A dictionary of defaults defined in the layer</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> Don\u2019t prompt the user at command line for manual configuration</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>MutableMapping[str, Any]</code> <p>A new configuration context</p>"},{"location":"reference/api/cookie_composer/cc_overrides/#cookie_composer.cc_overrides.update_extensions","title":"update_extensions","text":"<pre><code>update_extensions(\n    existing_config: MutableMapping[str, Any],\n    prompts: MutableMapping[str, Any],\n) -&gt; List[str]\n</code></pre> <p>Merge extensions from prompts into existing config.</p>"},{"location":"reference/api/cookie_composer/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":"<p>Command line setup.</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.add","title":"add","text":"<pre><code>add(\n    no_input: bool,\n    checkout: str,\n    directory: str,\n    overwrite_if_exists: bool,\n    skip_if_file_exists: bool,\n    default_config: bool,\n    destination: Path,\n    accept_hooks: str,\n    path_or_url: str,\n    context_params: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; None\n</code></pre> <p>Add the template or configuration PATH_OR_URL to an existing project.</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.cli","title":"cli","text":"<pre><code>cli() -&gt; None\n</code></pre> <p>Render templates using composition.</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.create","title":"create","text":"<pre><code>create(\n    no_input: bool,\n    checkout: str,\n    directory: str,\n    overwrite_if_exists: bool,\n    skip_if_file_exists: bool,\n    default_config: bool,\n    destination: Path,\n    accept_hooks: str,\n    path_or_url: str,\n    context_params: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; None\n</code></pre> <p>Create a project from the template or configuration PATH_OR_URL in using optional [CONTEXT_PARAMS].</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.link","title":"link","text":"<pre><code>link(\n    no_input: bool,\n    checkout: str,\n    directory: str,\n    overwrite_if_exists: bool,\n    skip_if_file_exists: bool,\n    default_config: bool,\n    destination: Optional[Path],\n    path_or_url: str,\n    context_params: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; None\n</code></pre> <p>Link an existing git repo to the template or composition PATH_OR_URL using optional [CONTEXT_PARAMS].</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.update","title":"update","text":"<pre><code>update(\n    no_input: bool,\n    destination: Path,\n    context_params: Optional[OrderedDict] = None,\n) -&gt; None\n</code></pre> <p>Update the project to the latest version of each template.</p>"},{"location":"reference/api/cookie_composer/cli/#cookie_composer.cli.validate_context_params","title":"validate_context_params","text":"<pre><code>validate_context_params(\n    ctx: Any, param: Any, value: list\n) -&gt; Optional[OrderedDict]\n</code></pre> <p>Validate context parameters.</p> <p>Convert a tuple to a dict</p> <p>e.g.: <code>('program_name=foobar', 'startsecs=66')</code> -&gt; <code>{'program_name': 'foobar', 'startsecs': '66'}</code></p> <p>Parameters:</p> <code>ctx</code> <p>Click context (unused)</p> <p> TYPE: <code>Any</code> </p> <code>param</code> <p>Click parameter (unused)</p> <p> TYPE: <code>Any</code> </p> <code>value</code> <p>Click parameter value</p> <p> TYPE: <code>list</code> </p> <p>Returns:</p> <code>Optional[OrderedDict]</code> <p>An ordered dict of the parameter values or <code>None</code> if no parameters.</p> <p>Raises:</p> <code>BadParameter</code> <p>If the parameters are not <code>key=value</code>.</p>"},{"location":"reference/api/cookie_composer/composition/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> composition","text":"<p>Project configuration and options.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.Composition","title":"Composition","text":"<p>               Bases: <code>BaseModel</code></p> <p>Composition of templates for a project.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition","title":"RenderedComposition","text":"<p>               Bases: <code>BaseModel</code></p> <p>A rendered composition of templates for a project.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition.layer_names","title":"layer_names  <code>property</code>","text":"<pre><code>layer_names: List[str]\n</code></pre> <p>Return a list of the names of all the layers.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition.layers","title":"layers  <code>instance-attribute</code>","text":"<pre><code>layers: List[RenderedLayer]\n</code></pre> <p>Rendered layers.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition.render_dir","title":"render_dir  <code>instance-attribute</code>","text":"<pre><code>render_dir: DirectoryPath\n</code></pre> <p>The directory in which the layers were rendered.</p> <p>The <code>render_dir</code> + <code>rendered_name</code> is the location of the project.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.RenderedComposition.rendered_name","title":"rendered_name  <code>instance-attribute</code>","text":"<pre><code>rendered_name: str\n</code></pre> <p>The name of the rendered project.</p>"},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/composition/#cookie_composer.composition.get_context_for_layer","title":"get_context_for_layer","text":"<pre><code>get_context_for_layer(\n    composition: RenderedComposition,\n    index: Optional[int] = None,\n) -&gt; dict\n</code></pre> <p>Merge the contexts for all layers up to index.</p> <p>An <code>index</code> of <code>None</code> does all the layers.</p> <p>Parameters:</p> <code>composition</code> <p>The rendered composition</p> <p> TYPE: <code>RenderedComposition</code> </p> <code>index</code> <p>Merge the contexts of the layers up to this 0-based index. <code>None</code> to do all layers.</p> <p> TYPE: <code>Optional[int]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>dict</code> <p>The comprehensively merged context</p>"},{"location":"reference/api/cookie_composer/data_merge/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data_merge","text":"<p>Tools for merging data.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.COMPREHENSIVE","title":"COMPREHENSIVE  <code>module-attribute</code>","text":"<pre><code>COMPREHENSIVE = 'comprehensive'\n</code></pre> <p>Comprehensively merge the two data structures.</p> <ul> <li>Scalars are overwritten by the new values</li> <li>lists are merged and de-duplicated</li> <li>dicts are recursively merged</li> </ul>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.DO_NOT_MERGE","title":"DO_NOT_MERGE  <code>module-attribute</code>","text":"<pre><code>DO_NOT_MERGE = 'do-not-merge'\n</code></pre> <p>Do not merge the data, use the file path to determine what to do.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.NESTED_OVERWRITE","title":"NESTED_OVERWRITE  <code>module-attribute</code>","text":"<pre><code>NESTED_OVERWRITE = 'nested-overwrite'\n</code></pre> <p>Merge deeply nested structures and overwrite at the lowest level; A deep <code>dict.update()</code>.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.OVERWRITE","title":"OVERWRITE  <code>module-attribute</code>","text":"<pre><code>OVERWRITE = 'overwrite'\n</code></pre> <p>Overwrite at the top level like <code>dict.update()</code>.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.Context","title":"Context","text":"<p>               Bases: <code>ChainMap</code></p> <p>Provides merging and convenience functions for managing contexts.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.Context-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.Context.is_empty","title":"is_empty  <code>property</code>","text":"<pre><code>is_empty: bool\n</code></pre> <p>The context has only one mapping and it is empty.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.Context-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.Context.flatten","title":"flatten","text":"<pre><code>flatten() -&gt; MutableMapping\n</code></pre> <p>Comprehensively merge all the maps into a single mapping.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.comprehensive_merge","title":"comprehensive_merge","text":"<pre><code>comprehensive_merge(*args: MutableMapping) -&gt; Any\n</code></pre> <p>Merges data comprehensively.</p> <p>All arguments must be of the same type.</p> <ul> <li>Scalars are overwritten by the new values</li> <li>lists are merged and de-duplicated</li> <li>dicts are recursively merged</li> </ul> <p>Parameters:</p> <code>*args</code> <p>List of dicts to merge with the first one the base</p> <p> TYPE: <code>MutableMapping</code> </p><p> DEFAULT: <code>()</code> </p> <p>Returns:</p> <code>Any</code> <p>The merged data</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.deep_merge","title":"deep_merge","text":"<pre><code>deep_merge(*dicts: dict) -&gt; dict\n</code></pre> <p>Merges dicts deeply.</p> <p>Parameters:</p> <code>*dicts</code> <p>List of dicts to merge with the first one as the base</p> <p> TYPE: <code>dict</code> </p><p> DEFAULT: <code>()</code> </p> <p>Returns:</p> <code>dict</code> <p>The merged dict</p> <p> TYPE: <code>dict</code> </p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.freeze_data","title":"freeze_data","text":"<pre><code>freeze_data(obj: Any) -&gt; Any\n</code></pre> <p>Check type and recursively return a new read-only object.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.get_merge_strategy","title":"get_merge_strategy","text":"<pre><code>get_merge_strategy(\n    path: Path, merge_strategies: Dict[str, str]\n) -&gt; str\n</code></pre> <p>Return the merge strategy of the path based on the layer configured rules.</p> <p>Files that are not mergable return DO_NOT_MERGE.</p> <p>Parameters:</p> <code>path</code> <p>The file path to evaluate.</p> <p> TYPE: <code>Path</code> </p> <code>merge_strategies</code> <p>The glob pattern-&gt;strategy mapping</p> <p> TYPE: <code>Dict[str, str]</code> </p> <p>Returns:</p> <code>str</code> <p>The appropriate merge strategy.</p>"},{"location":"reference/api/cookie_composer/data_merge/#cookie_composer.data_merge.merge_iterables","title":"merge_iterables","text":"<pre><code>merge_iterables(iter1: Iterable, iter2: Iterable) -&gt; set\n</code></pre> <p>Merge and de-duplicate a bunch of lists into a single list.</p> <p>Order is not guaranteed.</p> <p>Parameters:</p> <code>iter1</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> <code>iter2</code> <p>An Iterable</p> <p> TYPE: <code>Iterable</code> </p> <p>Returns:</p> <code>set</code> <p>The merged, de-duplicated sequence as a set</p>"},{"location":"reference/api/cookie_composer/diff/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> diff","text":"<p>Generating the difference between two directories.</p> <p>Nabbed from Cruft: https://github.com/cruft/cruft/</p>"},{"location":"reference/api/cookie_composer/diff/#cookie_composer.diff-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/diff/#cookie_composer.diff-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/diff/#cookie_composer.diff.display_diff","title":"display_diff","text":"<pre><code>display_diff(repo0: Path, repo1: Path) -&gt; None\n</code></pre> <p>Displays the diff between two repositories.</p>"},{"location":"reference/api/cookie_composer/diff/#cookie_composer.diff.get_diff","title":"get_diff","text":"<pre><code>get_diff(repo0: Path, repo1: Path) -&gt; str\n</code></pre> <p>Compute the raw diff between two repositories.</p>"},{"location":"reference/api/cookie_composer/diff/#cookie_composer.diff.replace_diff_prefixes","title":"replace_diff_prefixes","text":"<pre><code>replace_diff_prefixes(\n    diff: str, repo0_path: str, repo1_path: str\n) -&gt; str\n</code></pre> <p>Replace the changed file prefixes in the diff output.</p> <p>Our <code>git diff --no-index</code> command will output full paths like so::</p> <pre><code>--- upstream-template-old/tmp/tmpmp34g21y/remote/.coveragerc\n+++ upstream-template-new/tmp/tmpmp34g21y/local/.coveragerc\n</code></pre> <p>This isn\u2019t the format we need in order to apply the diff later on. The result of this command will change the paths to::</p> <pre><code>--- upstream-template-old/.coveragerc\n+++ upstream-template-new/.coveragerc\n</code></pre> <p>NIX OPs have <code>{prefix}/folder/file</code> WIN OPS have <code>{prefix}/c:/folder/file</code></p> <p>More info on git-diff can be found here: http://git-scm.com/docs/git-diff</p> <p>Parameters:</p> <code>diff</code> <p>The diff output to change</p> <p> TYPE: <code>str</code> </p> <code>repo0_path</code> <p>The full string path to the source repo</p> <p> TYPE: <code>str</code> </p> <code>repo1_path</code> <p>The full string path to the destination repo</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>str</code> <p>The modified diff string</p>"},{"location":"reference/api/cookie_composer/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":"<p>Exceptions raised when bad things happen.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.ChangesetUnicodeError","title":"ChangesetUnicodeError","text":"<pre><code>ChangesetUnicodeError()\n</code></pre> <p>               Bases: <code>UsageError</code></p> <p>Raised when <code>cookie-composer update</code> is unable to generate the diff.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.EmptyZipRepositoryError","title":"EmptyZipRepositoryError","text":"<pre><code>EmptyZipRepositoryError(url: str)\n</code></pre> <p>               Bases: <code>InvalidZipRepositoryError</code></p> <p>Raised when a zip repository is empty.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.GitError","title":"GitError","text":"<p>               Bases: <code>UsageError</code></p> <p>There was a problem doing git operations.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.InvalidZipPasswordError","title":"InvalidZipPasswordError","text":"<pre><code>InvalidZipPasswordError()\n</code></pre> <p>               Bases: <code>InvalidZipRepositoryError</code></p> <p>Raised when a zip repository is password-protected.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.InvalidZipRepositoryError","title":"InvalidZipRepositoryError","text":"<pre><code>InvalidZipRepositoryError(message: str = '')\n</code></pre> <p>               Bases: <code>UsageError</code></p> <p>Raised when a zip repository is invalid.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.MergeError","title":"MergeError","text":"<pre><code>MergeError(\n    origin: Optional[str] = None,\n    destination: Optional[str] = None,\n    strategy: Optional[str] = None,\n    error_message: Optional[str] = \"\",\n)\n</code></pre> <p>               Bases: <code>UsageError</code></p> <p>There was a problem merging a file.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.MissingCompositionFileError","title":"MissingCompositionFileError","text":"<pre><code>MissingCompositionFileError(path_or_url: str)\n</code></pre> <p>               Bases: <code>UsageError</code></p> <p>The composition is missing or inaccessible.</p>"},{"location":"reference/api/cookie_composer/exceptions/#cookie_composer.exceptions.NoZipDirectoryError","title":"NoZipDirectoryError","text":"<pre><code>NoZipDirectoryError(url: str)\n</code></pre> <p>               Bases: <code>InvalidZipRepositoryError</code></p> <p>Raised when a zip repository does not contain a directory.</p>"},{"location":"reference/api/cookie_composer/git_commands/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> git_commands","text":"<p>Functions for using git.</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.apply_patch","title":"apply_patch","text":"<pre><code>apply_patch(repo: Repo, diff: str) -&gt; None\n</code></pre> <p>Apply a patch to a destination directory.</p> <p>A git 3 way merge is the best bet at applying patches.</p> <p>Parameters:</p> <code>repo</code> <p>The git repo to apply the patch to</p> <p> TYPE: <code>Repo</code> </p> <code>diff</code> <p>The previously calculated diff</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.branch_exists","title":"branch_exists","text":"<pre><code>branch_exists(repo: Repo, branch_name: str) -&gt; bool\n</code></pre> <p>Does the branch exist in the repo?</p> <p>Parameters:</p> <code>repo</code> <p>The repository to check</p> <p> TYPE: <code>Repo</code> </p> <code>branch_name</code> <p>The name of the branch to check for</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>bool</code> <p><code>True</code> if the branch exists</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.checkout_branch","title":"checkout_branch","text":"<pre><code>checkout_branch(\n    repo: Repo,\n    branch_name: str,\n    remote_name: str = \"origin\",\n) -&gt; None\n</code></pre> <p>Checkout a local or remote branch.</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.checkout_ref","title":"checkout_ref","text":"<pre><code>checkout_ref(repo: Repo, ref: str) -&gt; None\n</code></pre> <p>Checkout a ref.</p> <p>Parameters:</p> <code>repo</code> <p>The repository to check out</p> <p> TYPE: <code>Repo</code> </p> <code>ref</code> <p>The ref to check out</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.clone","title":"clone","text":"<pre><code>clone(\n    repo_url: str, dest_path: Optional[Path] = None\n) -&gt; Repo\n</code></pre> <p>Clone a repo.</p> <p>Parameters:</p> <code>repo_url</code> <p>Repo URL or local path.</p> <p> TYPE: <code>str</code> </p> <code>dest_path</code> <p>The path to clone to.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Repo</code> <p>The repository.</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.get_repo","title":"get_repo","text":"<pre><code>get_repo(\n    project_dir: Union[str, Path],\n    search_parent_directories: bool = False,\n    ensure_clean: bool = False,\n) -&gt; Repo\n</code></pre> <p>Get the git Repo object for a directory.</p> <p>Parameters:</p> <code>project_dir</code> <p>The directory containing the .git folder</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>search_parent_directories</code> <p>if <code>True</code>, all parent directories will be searched for a valid repo as well.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>ensure_clean</code> <p>if <code>True</code>, raise an error if the repo is dirty</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Raises:</p> <code>GitError</code> <p>If the directory is not a git repo</p> <code>GitError</code> <p>If the directory git repository is dirty</p> <p>Returns:</p> <code>Repo</code> <p>The GitPython Repo object</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.remote_branch_exists","title":"remote_branch_exists","text":"<pre><code>remote_branch_exists(\n    repo: Repo,\n    branch_name: str,\n    remote_name: str = \"origin\",\n) -&gt; bool\n</code></pre> <p>Does the branch exist in the remote repo?</p> <p>Parameters:</p> <code>repo</code> <p>The repository to check</p> <p> TYPE: <code>Repo</code> </p> <code>branch_name</code> <p>The name of the branch to check for</p> <p> TYPE: <code>str</code> </p> <code>remote_name</code> <p>The name of the remote reference. Defaults to <code>origin</code></p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>'origin'</code> </p> <p>Returns:</p> <code>bool</code> <p><code>True</code> if the branch exists in the remote repository</p>"},{"location":"reference/api/cookie_composer/git_commands/#cookie_composer.git_commands.temp_git_worktree_dir","title":"temp_git_worktree_dir","text":"<pre><code>temp_git_worktree_dir(\n    repo_path: Path,\n    worktree_path: Optional[Path] = None,\n    branch: Optional[str] = None,\n    commit: Optional[str] = None,\n) -&gt; Iterator[Path]\n</code></pre> <p>Context Manager for a temporary working directory of a branch in a git repo.</p> <p>Inspired by https://github.com/thomasjahoda/cookiecutter_project_upgrader/blob/master/ cookiecutter_project_upgrader/logic.py</p> <p>Logic for checking out a branch or commit:</p> <ul> <li>If a commit is provided, use that</li> <li>If a branch is provided, and it is not the current branch, use that</li> <li>If a branch is provided, and it is the current branch, use the current commit</li> <li>If neither a branch nor a commit is provided, use the current branch and commit</li> </ul> <p>Parameters:</p> <code>repo_path</code> <p>The path to the template git repo</p> <p> TYPE: <code>Path</code> </p> <code>worktree_path</code> <p>The path put the worktree in. Defaults to a temporary directory.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>branch</code> <p>The branch to check out</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>commit</code> <p>The optional commit to check out</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Path</code> <p>The worktree_path</p> <p>Raises:</p> <code>GitError</code> <p>If the worktree could not be created</p>"},{"location":"reference/api/cookie_composer/io/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> io","text":"<p>Functions for handling input/output operations.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/io/#cookie_composer.io-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.deserialize_composition","title":"deserialize_composition","text":"<pre><code>deserialize_composition(\n    composition_info: List[dict],\n    local_path: Optional[Path] = None,\n    **kwargs\n) -&gt; Composition\n</code></pre> <p>Deserialize a composition from output.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.deserialize_layer","title":"deserialize_layer","text":"<pre><code>deserialize_layer(\n    layer_info: dict,\n    local_path: Optional[Path] = None,\n    **kwargs: Any\n) -&gt; LayerConfig\n</code></pre> <p>Deserialize a layer configuration from a rendered layer.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.deserialize_rendered_composition","title":"deserialize_rendered_composition","text":"<pre><code>deserialize_rendered_composition(\n    composition_info: List[dict], location: Path\n) -&gt; RenderedComposition\n</code></pre> <p>Deserialize a rendered composition from output.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.deserialize_rendered_layer","title":"deserialize_rendered_layer","text":"<pre><code>deserialize_rendered_layer(\n    rendered_layer_info: dict, location: Path\n) -&gt; RenderedLayer\n</code></pre> <p>Deserialize a rendered layer from output.</p> <p>Parameters:</p> <code>rendered_layer_info</code> <p>A dictionary containing the rendered layer information</p> <p> TYPE: <code>dict</code> </p> <code>location</code> <p>The location of the rendered layer, typically the parent directory of the parent directory of the .composition.yaml file</p> <p> TYPE: <code>Path</code> </p> <p>Returns:</p> <code>RenderedLayer</code> <p>A rendered layer object</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.get_composition_from_path_or_url","title":"get_composition_from_path_or_url","text":"<pre><code>get_composition_from_path_or_url(\n    path_or_url: str,\n    checkout: Optional[str] = None,\n    default_config: bool = False,\n    directory: Optional[str] = None,\n    no_input: bool = False,\n    output_dir: Optional[Path] = None,\n    overwrite_if_exists: bool = False,\n    skip_if_file_exists: bool = False,\n    initial_context: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; Composition\n</code></pre> <p>Generate a Composition from a path or URL.</p> <p>Parameters:</p> <code>path_or_url</code> <p>The path or url to the composition file or template</p> <p> TYPE: <code>str</code> </p> <code>checkout</code> <p>The branch, tag or commit to check out after git clone</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>default_config</code> <p>Do not load a config file. Use the defaults instead</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>directory</code> <p>Directory within repo that holds cookiecutter.json file</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>output_dir</code> <p>Where to generate the project</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>overwrite_if_exists</code> <p>Overwrite the contents of the output directory if it already exists</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>skip_if_file_exists</code> <p>Skip the files in the corresponding directories if they already exist</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>initial_context</code> <p>The initial context for the composition</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Composition</code> <p>The composition object.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.is_composition_file","title":"is_composition_file","text":"<pre><code>is_composition_file(path_or_url: Union[str, Path]) -&gt; bool\n</code></pre> <p>Return <code>True</code> if the filename a composition file.</p> <p>Parameters:</p> <code>path_or_url</code> <p>The path or URL to check</p> <p> TYPE: <code>Union[str, Path]</code> </p> <p>Returns:</p> <code>bool</code> <p><code>True</code> if the path is a configuration file.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.read_composition","title":"read_composition","text":"<pre><code>read_composition(\n    path_or_url: Union[str, Path], **kwargs: Any\n) -&gt; Composition\n</code></pre> <p>Read a YAML file and return a Composition.</p> <p>Parameters:</p> <code>path_or_url</code> <p>The location of the configuration file</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>**kwargs</code> <p>Additional keyword arguments passed to the composition</p> <p> TYPE: <code>Any</code> </p><p> DEFAULT: <code>{}</code> </p> <p>Returns:</p> <code>Composition</code> <p>A composition</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.read_rendered_composition","title":"read_rendered_composition","text":"<pre><code>read_rendered_composition(\n    path: Path,\n) -&gt; RenderedComposition\n</code></pre> <p>Read a <code>.composition.yaml</code> from a rendered project.</p> <p>Parameters:</p> <code>path</code> <p>The path to the .composition.yaml file to read</p> <p> TYPE: <code>Path</code> </p> <p>Returns:</p> <code>RenderedComposition</code> <p>The rendered composition information</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.read_yaml","title":"read_yaml","text":"<pre><code>read_yaml(path_or_url: Union[str, Path]) -&gt; List[dict]\n</code></pre> <p>Read a YAML file and return a list of dictionaries.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.serialize_composition","title":"serialize_composition","text":"<pre><code>serialize_composition(\n    layers: List[LayerConfig],\n) -&gt; List[dict]\n</code></pre> <p>Serialize a composition for output.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.serialize_layer","title":"serialize_layer","text":"<pre><code>serialize_layer(layer: LayerConfig) -&gt; dict\n</code></pre> <p>Serialize the layer configuration for outputting in a rendered layer.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.serialize_rendered_composition","title":"serialize_rendered_composition","text":"<pre><code>serialize_rendered_composition(\n    composition: RenderedComposition,\n) -&gt; List[dict]\n</code></pre> <p>Serialize a rendered composition for output.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.serialize_rendered_layer","title":"serialize_rendered_layer","text":"<pre><code>serialize_rendered_layer(\n    rendered_layer: RenderedLayer,\n) -&gt; dict\n</code></pre> <p>Serialize a rendered layer for output.</p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.write_rendered_composition","title":"write_rendered_composition","text":"<pre><code>write_rendered_composition(\n    composition: RenderedComposition,\n) -&gt; None\n</code></pre> <p>Write the composition file using the rendered layers to the appropriate place.</p> <p>Parameters:</p> <code>composition</code> <p>The rendered composition object to export</p> <p> TYPE: <code>RenderedComposition</code> </p>"},{"location":"reference/api/cookie_composer/io/#cookie_composer.io.write_yaml","title":"write_yaml","text":"<pre><code>write_yaml(path: Path, contents: List[dict]) -&gt; None\n</code></pre> <p>Write a YAML file.</p>"},{"location":"reference/api/cookie_composer/layers/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> layers","text":"<p>Layer management.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig","title":"LayerConfig","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration for a layer of a composition.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.initial_context","title":"initial_context  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>initial_context: MutableMapping[str, Any] = Field(\n    default_factory=dict\n)\n</code></pre> <p>Dictionary that will provide values for input.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.layer_name","title":"layer_name  <code>property</code>","text":"<pre><code>layer_name: str\n</code></pre> <p>The name of the template layer.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.merge_strategies","title":"merge_strategies  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>merge_strategies: Dict[str, str] = Field(\n    default_factory=lambda: {\"*\": DO_NOT_MERGE}\n)\n</code></pre> <p>The method to merge specific paths or glob patterns.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.no_input","title":"no_input  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>no_input: bool = False\n</code></pre> <p>Do not prompt for parameters and only use cookiecutter.json file content.</p> <p>This is only used for initial generation. After initial generation, the results are stored in the context.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.overwrite","title":"overwrite  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>overwrite: List[str] = Field(default_factory=list)\n</code></pre> <p>Paths or glob patterns to always overwrite.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.overwrite_exclude","title":"overwrite_exclude  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>overwrite_exclude: List[str] = Field(default_factory=list)\n</code></pre> <p>Paths or glob patterns to exclude from overwriting.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.skip_generation","title":"skip_generation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>skip_generation: List[str] = Field(default_factory=list)\n</code></pre> <p>Paths or glob patterns to skip attempting to generate.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.skip_hooks","title":"skip_hooks  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>skip_hooks: bool = False\n</code></pre> <p>Skip the template hooks.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.skip_if_file_exists","title":"skip_if_file_exists  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>skip_if_file_exists: bool = True\n</code></pre> <p>Skip the files in the corresponding directories if they already exist.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.template","title":"template  <code>instance-attribute</code>","text":"<pre><code>template: Template\n</code></pre> <p>Information about the template.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.LayerConfig.generate_context","title":"generate_context","text":"<pre><code>generate_context(\n    default_context: MutableMapping[str, Any]\n) -&gt; OrderedDict\n</code></pre> <p>Get the context for prompting the user for values.</p> <p>The order of precedence is:</p> <ol> <li><code>initial_context</code> from the composition or command-line</li> <li><code>default_context</code> from the user_config</li> <li><code>raw context</code> from the template</li> </ol> <p>Equivalent to cookiecutter.generate.generate_context but with the following differences:</p> <ol> <li>Reading the raw context file is handled by the layer\u2019s template</li> <li>The layer\u2019s initial context is treated as the <code>extra_context</code></li> <li>Does not namespace the context with <code>{\"cookiecutter\": ...}</code></li> </ol> <p>Parameters:</p> <code>default_context</code> <p>The default context from the user_config</p> <p> TYPE: <code>MutableMapping[str, Any]</code> </p> <p>Returns:</p> <code>OrderedDict</code> <p>A dict containing the context for prompting the user</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer","title":"RenderedLayer","text":"<p>               Bases: <code>BaseModel</code></p> <p>Information about a rendered layer.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.latest_commit","title":"latest_commit  <code>property</code>","text":"<pre><code>latest_commit: Optional[str]\n</code></pre> <p>The latest commit checked out if the layer source was a git repo.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.layer","title":"layer  <code>instance-attribute</code>","text":"<pre><code>layer: LayerConfig\n</code></pre> <p>The original layer configuration that was rendered.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.location","title":"location  <code>instance-attribute</code>","text":"<pre><code>location: DirectoryPath\n</code></pre> <p>The directory where the layer was rendered.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.rendered_commit","title":"rendered_commit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rendered_commit: Optional[str] = None\n</code></pre> <p>If a git template, this is the commit of the template that was rendered.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.rendered_context","title":"rendered_context  <code>instance-attribute</code>","text":"<pre><code>rendered_context: MutableMapping[str, Any]\n</code></pre> <p>The context based on questions asked.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.rendered_name","title":"rendered_name  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>rendered_name: Optional[str] = None\n</code></pre> <p>The name of the rendered template directory.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.RenderedLayer.set_rendered_name","title":"set_rendered_name  <code>classmethod</code>","text":"<pre><code>set_rendered_name(values: Dict[str, Any]) -&gt; Dict[str, Any]\n</code></pre> <p>Set the [cookie_composer.layers.RenderedLayer.layer_name] to the name of the rendered template directory.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.WriteStrategy","title":"WriteStrategy","text":"<p>               Bases: <code>Enum</code></p> <p>How to deal with a file.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.WriteStrategy-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.WriteStrategy.MERGE","title":"MERGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>MERGE = 3\n</code></pre> <p>Merge the file with an existing file, or write a new file.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.WriteStrategy.SKIP","title":"SKIP  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>SKIP = 2\n</code></pre> <p>Skip the file.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.WriteStrategy.WRITE","title":"WRITE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>WRITE = 1\n</code></pre> <p>Write or overwrite the file.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.get_accept_hooks_per_layer","title":"get_accept_hooks_per_layer","text":"<pre><code>get_accept_hooks_per_layer(\n    accept_hooks: str, num_layers: int\n) -&gt; list\n</code></pre> <p>Convert a single accept_hooks value into a value for every layer based on num_layers.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.get_layer_context","title":"get_layer_context","text":"<pre><code>get_layer_context(\n    template_repo_dir: Path,\n    context_for_prompting: dict,\n    initial_context: MutableMapping[str, Any],\n    full_context: Context,\n    no_input: bool = False,\n) -&gt; dict\n</code></pre> <p>Get the context for a layer pre-rendering values using previous layers contexts as defaults.</p> <p>The layer context is the combination of several things:</p> <ul> <li>raw layer context (contents of the cookiecutter.json file)</li> <li>The user\u2019s default context (from the user\u2019s cookiecutter config file)</li> <li>initial context set in the template composition (or {} if not a composition or not set)</li> <li>initial context passed in by user (as set from the command line.     This is merged into the layer\u2019s inital context when the layer is deserialized. See     cookie_composer.io.get_composition_from_path_or_url)</li> <li>context from previous layers</li> </ul> <p>Parameters:</p> <code>template_repo_dir</code> <p>The location of the template repo to use for rendering</p> <p> TYPE: <code>Path</code> </p> <code>context_for_prompting</code> <p>The raw context from the cookiecutter.json file with user defaults applied</p> <p> TYPE: <code>dict</code> </p> <code>initial_context</code> <p>The initial context from the layer configuration</p> <p> TYPE: <code>MutableMapping[str, Any]</code> </p> <code>full_context</code> <p>A full context from previous layers.</p> <p> TYPE: <code>Context</code> </p> <code>no_input</code> <p>If <code>False</code> do not prompt for missing values and use defaults instead.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>dict</code> <p>A dict containing the context for rendering the layer</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.get_template_rendered_name","title":"get_template_rendered_name","text":"<pre><code>get_template_rendered_name(\n    template: Template, context: MutableMapping\n) -&gt; str\n</code></pre> <p>Find and render the template\u2019s root directory\u2019s name.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.get_write_strategy","title":"get_write_strategy","text":"<pre><code>get_write_strategy(\n    origin: Path,\n    destination: Path,\n    rendered_layer: RenderedLayer,\n) -&gt; WriteStrategy\n</code></pre> <p>Based on the layer_config rules, determine if we should overwrite an existing path.</p> <p>Parameters:</p> <code>origin</code> <p>Path within the rendered layer that we are evaluating.</p> <p> TYPE: <code>Path</code> </p> <code>destination</code> <p>Path to which we would write this file (may not actually exist)</p> <p> TYPE: <code>Path</code> </p> <code>rendered_layer</code> <p>Rendered layer configuration.</p> <p> TYPE: <code>RenderedLayer</code> </p> <p>Returns:</p> <code>WriteStrategy</code> <p>The appropriate way to handle writing this file.</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.merge_layers","title":"merge_layers","text":"<pre><code>merge_layers(\n    destination: Path, rendered_layer: RenderedLayer\n) -&gt; None\n</code></pre> <p>Merge a layer into another layer using the rules specified in the layer_config.</p> <p>Parameters:</p> <code>destination</code> <p>The root path to merge into.</p> <p> TYPE: <code>Path</code> </p> <code>rendered_layer</code> <p>The information about the rendered layer.</p> <p> TYPE: <code>RenderedLayer</code> </p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.render_layer","title":"render_layer","text":"<pre><code>render_layer(\n    layer_config: LayerConfig,\n    render_dir: Path,\n    full_context: Optional[Context] = None,\n    commit: Optional[str] = None,\n    accept_hooks: str = \"yes\",\n) -&gt; RenderedLayer\n</code></pre> <p>Process one layer of the template composition.</p> <p>Renders the template using cookiecutter.</p> <p>Parameters:</p> <code>layer_config</code> <p>The configuration of the layer to render</p> <p> TYPE: <code>LayerConfig</code> </p> <code>render_dir</code> <p>Where to render the template</p> <p> TYPE: <code>Path</code> </p> <code>full_context</code> <p>The extra context from all layers in the composition</p> <p> TYPE: <code>Optional[Context]</code> </p><p> DEFAULT: <code>None</code> </p> <code>commit</code> <p>The commit to checkout if the template is a git repo</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>accept_hooks</code> <p>Accept pre- and post-hooks if set to <code>True</code></p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>'yes'</code> </p> <p>Returns:</p> <code>RenderedLayer</code> <p>The rendered layer information</p>"},{"location":"reference/api/cookie_composer/layers/#cookie_composer.layers.render_layers","title":"render_layers","text":"<pre><code>render_layers(\n    layers: List[LayerConfig],\n    destination: Path,\n    initial_context: Optional[dict] = None,\n    no_input: bool = False,\n    accept_hooks: str = \"all\",\n) -&gt; List[RenderedLayer]\n</code></pre> <p>Render layers to a destination.</p> <p>Parameters:</p> <code>layers</code> <p>A list of <code>LayerConfig</code> to render</p> <p> TYPE: <code>List[LayerConfig]</code> </p> <code>destination</code> <p>The location to merge the rendered layers to</p> <p> TYPE: <code>Path</code> </p> <code>initial_context</code> <p>An initial context to pass to the rendering</p> <p> TYPE: <code>Optional[dict]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>accept_hooks</code> <p>How to process pre/post hooks.</p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>'all'</code> </p> <p>Returns:</p> <code>List[RenderedLayer]</code> <p>A list of the rendered layer information</p>"},{"location":"reference/api/cookie_composer/matching/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> matching","text":"<p>Matching files and patterns.</p>"},{"location":"reference/api/cookie_composer/matching/#cookie_composer.matching-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/matching/#cookie_composer.matching.matches_any_glob","title":"matches_any_glob","text":"<pre><code>matches_any_glob(\n    path: Union[str, Path], patterns: List[str]\n) -&gt; bool\n</code></pre> <p>Does the path match any of the glob patterns?</p> <p>Parameters:</p> <code>path</code> <p>Path to test</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>patterns</code> <p>A list of glob patterns</p> <p> TYPE: <code>List[str]</code> </p> <p>Returns:</p> <code>bool</code> <p><code>True</code> if it matches any of the patterns</p>"},{"location":"reference/api/cookie_composer/matching/#cookie_composer.matching.rel_fnmatch","title":"rel_fnmatch","text":"<pre><code>rel_fnmatch(name: str, pat: str) -&gt; bool\n</code></pre> <p>Force a relative match of the pattern by prefixing a <code>*</code>.</p>"},{"location":"reference/api/cookie_composer/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":"<p>Utilities not easily categorized.</p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.echo","title":"echo","text":"<pre><code>echo(\n    message: Optional[Any] = None,\n    file: Optional[IO] = None,\n    nl: bool = True,\n    err: bool = False,\n    color: Optional[bool] = None,\n    **styles: Any\n) -&gt; None\n</code></pre> <p>A local abstraction for printing messages.</p> <p>Default behavior is that of click.secho.</p> <p>This is to allow user feedback without every function requiring a click dependency. Especially during testing.</p> <p>Parameters:</p> <code>message</code> <p>The string or bytes to output. Other objects are converted to strings.</p> <p> TYPE: <code>Optional[Any]</code> </p><p> DEFAULT: <code>None</code> </p> <code>file</code> <p>The file to write to. Defaults to stdout.</p> <p> TYPE: <code>Optional[IO]</code> </p><p> DEFAULT: <code>None</code> </p> <code>nl</code> <p>Print a newline after the message. Enabled by default.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>True</code> </p> <code>err</code> <p>Write to stderr instead of stdout.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>color</code> <p>Force showing or hiding colors and other styles. By default Click will remove color if the output does not look like an interactive terminal.</p> <p> TYPE: <code>Optional[bool]</code> </p><p> DEFAULT: <code>None</code> </p> <code>**styles</code> <p>Style keyword arguments</p> <p> TYPE: <code>Any</code> </p><p> DEFAULT: <code>{}</code> </p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.get_deleted_files","title":"get_deleted_files","text":"<pre><code>get_deleted_files(\n    template_dir: Path, project_dir: Path\n) -&gt; Set[Path]\n</code></pre> <p>Get a list of files in the rendered template that do not exist in the project.</p> <p>This is to avoid introducing changes that won\u2019t apply cleanly to the current project.</p> <p>Nabbed from Cruft: https://github.com/cruft/cruft/</p> <p>Parameters:</p> <code>template_dir</code> <p>The path to the directory rendered with the same context as the project</p> <p> TYPE: <code>Path</code> </p> <code>project_dir</code> <p>The path to the current project</p> <p> TYPE: <code>Path</code> </p> <p>Returns:</p> <code>Set[Path]</code> <p>A set of paths that are missing</p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.remove_paths","title":"remove_paths","text":"<pre><code>remove_paths(\n    root: Path, paths_to_remove: Set[Path]\n) -&gt; None\n</code></pre> <p>Remove all paths in <code>paths_to_remove</code> from <code>root</code>.</p> <p>Nabbed from Cruft: https://github.com/cruft/cruft/</p> <p>Parameters:</p> <code>root</code> <p>The absolute path of the directory requiring path removal</p> <p> TYPE: <code>Path</code> </p> <code>paths_to_remove</code> <p>The set of relative paths to remove from <code>root</code></p> <p> TYPE: <code>Set[Path]</code> </p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.remove_readonly_bit","title":"remove_readonly_bit","text":"<pre><code>remove_readonly_bit(\n    func: Callable[[str], None], path: str, _: Any\n) -&gt; None\n</code></pre> <p>Clear the readonly bit and reattempt the removal.</p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.remove_single_path","title":"remove_single_path","text":"<pre><code>remove_single_path(path: Path) -&gt; None\n</code></pre> <p>Remove a path with extra error handling for Windows.</p> <p>Parameters:</p> <code>path</code> <p>The path to remove</p> <p> TYPE: <code>Path</code> </p> <p>Raises:</p> <code>IOError</code> <p>If the file could not be removed</p>"},{"location":"reference/api/cookie_composer/utils/#cookie_composer.utils.temporary_copy","title":"temporary_copy","text":"<pre><code>temporary_copy(original_path: Path) -&gt; Iterator[Path]\n</code></pre> <p>Create a temporary copy of a file or directory.</p> <p>Parameters:</p> <code>original_path</code> <p>The path to the file or directory to copy</p> <p> TYPE: <code>Path</code> </p> YIELDS DESCRIPTION <code>Path</code> <p>The path to the temporary copy</p>"},{"location":"reference/api/cookie_composer/commands/","title":"Index","text":"<p>Commands for cookie composer.</p>"},{"location":"reference/api/cookie_composer/commands/add/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> add","text":"<p>The implementation of the add command.</p>"},{"location":"reference/api/cookie_composer/commands/add/#cookie_composer.commands.add-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/commands/add/#cookie_composer.commands.add.add_cmd","title":"add_cmd","text":"<pre><code>add_cmd(\n    path_or_url: str,\n    destination_dir: Optional[Path] = None,\n    no_input: bool = False,\n    checkout: Optional[str] = None,\n    directory: Optional[str] = None,\n    overwrite_if_exists: bool = False,\n    skip_if_file_exists: bool = False,\n    default_config: bool = False,\n    accept_hooks: str = \"all\",\n    initial_context: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; None\n</code></pre> <p>Add a template or configuration to an existing project.</p> <p>Parameters:</p> <code>path_or_url</code> <p>A URL or string to add the template or configuration</p> <p> TYPE: <code>str</code> </p> <code>destination_dir</code> <p>The project directory to add the layer to</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>checkout</code> <p>The branch, tag or commit to check out after git clone</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>directory</code> <p>Directory within repo that holds cookiecutter.json file</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>overwrite_if_exists</code> <p>Overwrite the contents of the output directory if it already exists</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>skip_if_file_exists</code> <p>Skip the files in the corresponding directories if they already exist</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>default_config</code> <p>Do not load a config file. Use the defaults instead</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>accept_hooks</code> <p>How to deal with pre/post hooks</p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>'all'</code> </p> <code>initial_context</code> <p>The initial context for the composition layer</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>GitError</code> <p>If the destination_dir is not a git repository</p> <code>ValueError</code> <p>If there is not a .composition.yaml file in the destination directory</p>"},{"location":"reference/api/cookie_composer/commands/authn/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> authn","text":"<p>Authentication subcommands.</p>"},{"location":"reference/api/cookie_composer/commands/authn/#cookie_composer.commands.authn-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/commands/authn/#cookie_composer.commands.authn.auth","title":"auth","text":"<pre><code>auth() -&gt; None\n</code></pre> <p>Authenticate cookie-composer to a service.</p>"},{"location":"reference/api/cookie_composer/commands/authn/#cookie_composer.commands.authn.login","title":"login","text":"<pre><code>login(\n    git_protocol: str,\n    service: str,\n    scopes: str,\n    with_token: click.File,\n) -&gt; None\n</code></pre> <p>Authenticate to a service.</p>"},{"location":"reference/api/cookie_composer/commands/authn/#cookie_composer.commands.authn.token","title":"token","text":"<pre><code>token(service: str) -&gt; None\n</code></pre> <p>Print the auth token cookie-composer is configured to use.</p>"},{"location":"reference/api/cookie_composer/commands/create/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> create","text":"<p>Methods for generating projects.</p>"},{"location":"reference/api/cookie_composer/commands/create/#cookie_composer.commands.create-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/commands/create/#cookie_composer.commands.create-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/commands/create/#cookie_composer.commands.create.create_cmd","title":"create_cmd","text":"<pre><code>create_cmd(\n    path_or_url: str,\n    output_dir: Optional[Path] = None,\n    no_input: bool = False,\n    checkout: Optional[str] = None,\n    directory: Optional[str] = None,\n    overwrite_if_exists: bool = False,\n    skip_if_file_exists: bool = False,\n    default_config: bool = False,\n    accept_hooks: str = \"all\",\n    initial_context: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; Path\n</code></pre> <p>Generate a new project from a composition file, local template or remote template.</p> <p>Parameters:</p> <code>path_or_url</code> <p>The path or url to the composition file or template</p> <p> TYPE: <code>str</code> </p> <code>output_dir</code> <p>Where to generate the project</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>checkout</code> <p>The branch, tag or commit to check out after git clone</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>directory</code> <p>Directory within repo that holds cookiecutter.json file</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>overwrite_if_exists</code> <p>Overwrite the contents of the output directory if it already exists</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>skip_if_file_exists</code> <p>Skip the files in the corresponding directories if they already exist</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>default_config</code> <p>Do not load a config file. Use the defaults instead</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>accept_hooks</code> <p>Which pre/post hooks should be applied?</p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>'all'</code> </p> <code>initial_context</code> <p>The initial context for the composition</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>ClickException</code> <p>If there is a problem cloning the repository</p> <p>Returns:</p> <code>Path</code> <p>The path to the generated project.</p>"},{"location":"reference/api/cookie_composer/commands/link/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> link","text":"<p>The implementation of the link command.</p>"},{"location":"reference/api/cookie_composer/commands/link/#cookie_composer.commands.link-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/commands/link/#cookie_composer.commands.link.link_cmd","title":"link_cmd","text":"<pre><code>link_cmd(\n    path_or_url: str,\n    destination_dir: Optional[Path] = None,\n    no_input: bool = False,\n    checkout: Optional[str] = None,\n    directory: Optional[str] = None,\n    overwrite_if_exists: bool = False,\n    skip_if_file_exists: bool = False,\n    default_config: bool = False,\n    initial_context: Optional[\n        MutableMapping[str, Any]\n    ] = None,\n) -&gt; None\n</code></pre> <p>Link a template or configuration to an existing project.</p> <p>Parameters:</p> <code>path_or_url</code> <p>A URL or string to add the template or configuration</p> <p> TYPE: <code>str</code> </p> <code>destination_dir</code> <p>The project directory to add the layer to</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>checkout</code> <p>The branch, tag or commit to check out after git clone</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>directory</code> <p>Directory within repo that holds cookiecutter.json file</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>overwrite_if_exists</code> <p>Overwrite the contents of the output directory if it already exists</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>skip_if_file_exists</code> <p>Skip the files in the corresponding directories if they already exist</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>default_config</code> <p>Do not load a config file. Use the defaults instead</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>initial_context</code> <p>The initial context for the composition</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>GitError</code> <p>If the destination_dir is not a git repository</p> <code>GitError</code> <p>If the destination_dir git repository is dirty</p> <code>ValueError</code> <p>If there is a .composition.yaml file in the destination directory</p>"},{"location":"reference/api/cookie_composer/commands/update/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> update","text":"<p>The implementation of the update command.</p>"},{"location":"reference/api/cookie_composer/commands/update/#cookie_composer.commands.update-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/commands/update/#cookie_composer.commands.update-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/commands/update/#cookie_composer.commands.update.update_cmd","title":"update_cmd","text":"<pre><code>update_cmd(\n    project_dir: Optional[Path] = None,\n    no_input: bool = False,\n) -&gt; None\n</code></pre> <p>Update the project with the latest versions of each layer.</p> <p>Parameters:</p> <code>project_dir</code> <p>The project directory to update. Defaults to current directory.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>no_input</code> <p>If <code>True</code> force each layer\u2019s <code>no_input</code> attribute to <code>True</code></p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Raises:</p> <code>GitError</code> <p>If the destination_dir is not a git repository</p> <code>ValueError</code> <p>If there is not a .composition.yaml file in the destination directory</p>"},{"location":"reference/api/cookie_composer/commands/update/#cookie_composer.commands.update.update_rendered_composition_layers","title":"update_rendered_composition_layers","text":"<pre><code>update_rendered_composition_layers(\n    base: RenderedComposition,\n    updated_layers: List[RenderedLayer],\n) -&gt; RenderedComposition\n</code></pre> <p>Update <code>base.layers</code> with <code>updated_layers</code> where layer names match.</p> <p>If, for some reason, a layer exists in <code>updated_layers</code> but not in <code>base</code>, it is discarded.</p> <p>Parameters:</p> <code>base</code> <p>The base composition whose layers are to be updated</p> <p> TYPE: <code>RenderedComposition</code> </p> <code>updated_layers</code> <p>The new rendered layers</p> <p> TYPE: <code>List[RenderedLayer]</code> </p> <p>Raises:</p> <code>RuntimeError</code> <p>If a layer\u2019s location <code>render_dir</code> properties don\u2019t match</p> <code>RuntimeError</code> <p>If the compositions\u2019 <code>rendered_name</code> properties don\u2019t match</p> <p>Returns:</p> <code>RenderedComposition</code> <p>A new composition with updated layers</p>"},{"location":"reference/api/cookie_composer/merge_files/","title":"Index","text":"<p>Methods for merging data files.</p> <p>The merging functions should look similar to the following:</p> <pre><code>def merge_generic_files(origin: Path, destination: Path, merge_strategy: str) -&gt; None:\n</code></pre> <p>The function must write the file to destination.</p> <p>The function must wrap any errors into a MergeError and raise it.</p>"},{"location":"reference/api/cookie_composer/merge_files/#cookie_composer.merge_files-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/merge_files/ini_file/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ini_file","text":"<p>Merge two .ini files into one.</p>"},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file.config_to_dict","title":"config_to_dict","text":"<pre><code>config_to_dict(config: configparser.ConfigParser) -&gt; dict\n</code></pre> <p>Convert a configparser object to a dictionary.</p>"},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file.dict_to_config","title":"dict_to_config","text":"<pre><code>dict_to_config(\n    dictionary: dict,\n) -&gt; configparser.ConfigParser\n</code></pre> <p>Convert a dict to a configparser object.</p>"},{"location":"reference/api/cookie_composer/merge_files/ini_file/#cookie_composer.merge_files.ini_file.merge_ini_files","title":"merge_ini_files","text":"<pre><code>merge_ini_files(\n    new_file: Path, existing_file: Path, merge_strategy: str\n) -&gt; None\n</code></pre> <p>Merge two INI files into one.</p> <p>Raises:</p> <code>MergeError</code> <p>If something goes wrong</p> <p>Parameters:</p> <code>new_file</code> <p>The path to the data file to merge</p> <p> TYPE: <code>Path</code> </p> <code>existing_file</code> <p>The path to the data file to merge into and write out.</p> <p> TYPE: <code>Path</code> </p> <code>merge_strategy</code> <p>How to do the merge</p> <p> TYPE: <code>str</code> </p>"},{"location":"reference/api/cookie_composer/merge_files/json_file/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> json_file","text":"<p>Merge two json files into one.</p>"},{"location":"reference/api/cookie_composer/merge_files/json_file/#cookie_composer.merge_files.json_file-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/merge_files/json_file/#cookie_composer.merge_files.json_file-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/merge_files/json_file/#cookie_composer.merge_files.json_file-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/merge_files/json_file/#cookie_composer.merge_files.json_file.default","title":"default","text":"<pre><code>default(obj: Any) -&gt; dict\n</code></pre> <p>Default JSON encoder.</p>"},{"location":"reference/api/cookie_composer/merge_files/json_file/#cookie_composer.merge_files.json_file.merge_json_files","title":"merge_json_files","text":"<pre><code>merge_json_files(\n    new_file: Path, existing_file: Path, merge_strategy: str\n) -&gt; None\n</code></pre> <p>Merge two json files into one.</p> <p>Parameters:</p> <code>new_file</code> <p>The path to the data file to merge</p> <p> TYPE: <code>Path</code> </p> <code>existing_file</code> <p>The path to the data file to merge into and write out.</p> <p> TYPE: <code>Path</code> </p> <code>merge_strategy</code> <p>How to do the merge</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>MergeError</code> <p>If something goes wrong</p>"},{"location":"reference/api/cookie_composer/merge_files/toml_file/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> toml_file","text":"<p>Merge two toml files into one.</p>"},{"location":"reference/api/cookie_composer/merge_files/toml_file/#cookie_composer.merge_files.toml_file-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/merge_files/toml_file/#cookie_composer.merge_files.toml_file-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/merge_files/toml_file/#cookie_composer.merge_files.toml_file-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/merge_files/toml_file/#cookie_composer.merge_files.toml_file.merge_toml_files","title":"merge_toml_files","text":"<pre><code>merge_toml_files(\n    new_file: Path, existing_file: Path, merge_strategy: str\n) -&gt; None\n</code></pre> <p>Merge two toml files into one.</p> <p>Parameters:</p> <code>new_file</code> <p>The path to the data file to merge</p> <p> TYPE: <code>Path</code> </p> <code>existing_file</code> <p>The path to the data file to merge into and write out.</p> <p> TYPE: <code>Path</code> </p> <code>merge_strategy</code> <p>How to do the merge</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>MergeError</code> <p>If something goes wrong</p>"},{"location":"reference/api/cookie_composer/merge_files/yaml_file/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yaml_file","text":"<p>Merge two json files into one.</p>"},{"location":"reference/api/cookie_composer/merge_files/yaml_file/#cookie_composer.merge_files.yaml_file-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/merge_files/yaml_file/#cookie_composer.merge_files.yaml_file-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/merge_files/yaml_file/#cookie_composer.merge_files.yaml_file-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/merge_files/yaml_file/#cookie_composer.merge_files.yaml_file.merge_yaml_files","title":"merge_yaml_files","text":"<pre><code>merge_yaml_files(\n    new_file: Path, existing_file: Path, merge_strategy: str\n) -&gt; None\n</code></pre> <p>Merge two json files into one.</p> <p>Parameters:</p> <code>new_file</code> <p>The path to the data file to merge</p> <p> TYPE: <code>Path</code> </p> <code>existing_file</code> <p>The path to the data file to merge into and write out.</p> <p> TYPE: <code>Path</code> </p> <code>merge_strategy</code> <p>How to do the merge</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>MergeError</code> <p>If something goes wrong</p>"},{"location":"reference/api/cookie_composer/templates/","title":"Index","text":"<p>Templates for cookie_composer.</p>"},{"location":"reference/api/cookie_composer/templates/git_repo/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> git_repo","text":"<p>Utility functions for handling and fetching repo archives in git format.</p>"},{"location":"reference/api/cookie_composer/templates/git_repo/#cookie_composer.templates.git_repo-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/templates/git_repo/#cookie_composer.templates.git_repo-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/git_repo/#cookie_composer.templates.git_repo.get_cached_remote","title":"get_cached_remote","text":"<pre><code>get_cached_remote(\n    git_uri: str,\n    cache_dir: Path,\n    checkout: Optional[str] = None,\n) -&gt; Repo\n</code></pre> <p>Return a cached remote repo.</p> <p>This provides some error-checking for the cached repo, and will re-clone if the cached repo is in a detached head state.</p> <p>Parameters:</p> <code>git_uri</code> <p>The remote git URI</p> <p> TYPE: <code>str</code> </p> <code>cache_dir</code> <p>The directory to cache the repo in</p> <p> TYPE: <code>Path</code> </p> <code>checkout</code> <p>The optional checkout ref to use</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Repo</code> <p>The cached repo</p>"},{"location":"reference/api/cookie_composer/templates/git_repo/#cookie_composer.templates.git_repo.get_repo_name","title":"get_repo_name","text":"<pre><code>get_repo_name(\n    repo_url: str, checkout: Optional[str] = None\n) -&gt; str\n</code></pre> <p>Construct the destination repo name from the repo URL and checkout.</p>"},{"location":"reference/api/cookie_composer/templates/git_repo/#cookie_composer.templates.git_repo.template_repo_from_git","title":"template_repo_from_git","text":"<pre><code>template_repo_from_git(\n    git_uri: str,\n    locality: Locality,\n    cache_dir: Path,\n    checkout: Optional[str] = None,\n) -&gt; TemplateRepo\n</code></pre> <p>Return a template repo from a git URI.</p> <ul> <li>If the repo is remote, it will be cloned to the cache_dir and named after the repo and checkout value, for example <code>mytemplate_main</code>. This allows for multiple versions of the same repo to be cached without a conflict.</li> <li>If the repo is already cloned, it will not be cloned again.</li> <li>If the repo is local, it is not cloned but will check out <code>checkout</code>, and the local path is returned.</li> </ul>"},{"location":"reference/api/cookie_composer/templates/source/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> source","text":"<p>Entry point for cookiecutter templates.</p>"},{"location":"reference/api/cookie_composer/templates/source/#cookie_composer.templates.source-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/templates/source/#cookie_composer.templates.source-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/source/#cookie_composer.templates.source.get_template_repo","title":"get_template_repo","text":"<pre><code>get_template_repo(\n    url: str,\n    local_path: Optional[Path] = None,\n    checkout: Optional[str] = None,\n    password: Optional[str] = None,\n) -&gt; TemplateRepo\n</code></pre> <p>Get a template repository from a URL.</p> <p>Parameters:</p> <code>url</code> <p>The string from the template field in the composition file.</p> <p> TYPE: <code>str</code> </p> <code>local_path</code> <p>Used to resolve local paths.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>checkout</code> <p>The branch, tag or commit to check out after git clone</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>password</code> <p>The password to use if template is a password-protected Zip archive.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>TemplateRepo</code> <p>A TemplateRepo object.</p>"},{"location":"reference/api/cookie_composer/templates/source/#cookie_composer.templates.source.identify_repo","title":"identify_repo","text":"<pre><code>identify_repo(\n    url: str, local_path: Optional[Path] = None\n) -&gt; Tuple[TemplateFormat, Locality]\n</code></pre> <p>Identify the repo format and locality from the URL.</p>"},{"location":"reference/api/cookie_composer/templates/source/#cookie_composer.templates.source.resolve_local_path","title":"resolve_local_path","text":"<pre><code>resolve_local_path(\n    url: str, local_path: Optional[Path] = None\n) -&gt; Path\n</code></pre> <p>Resolve a local path.</p> <p>Parameters:</p> <code>url</code> <p>The string from the template field in the composition file.</p> <p> TYPE: <code>str</code> </p> <code>local_path</code> <p>An optional path to resolve the URL against.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Path</code> <p>The resolved path.</p>"},{"location":"reference/api/cookie_composer/templates/types/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> types","text":"<p>Datatypes for templates.</p> <p>Templates are a representation of source templates used to generate projects.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Locality","title":"Locality","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The locality of a template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template","title":"Template  <code>dataclass</code>","text":"<pre><code>Template(\n    repo: TemplateRepo,\n    directory: str = \"\",\n    _context: Optional[OrderedDict] = None,\n)\n</code></pre> <p>A template is the combination of a template repository and a directory containing a cookiecutter.json file.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.cached_path","title":"cached_path  <code>property</code>","text":"<pre><code>cached_path: Path\n</code></pre> <p>The path to the cached template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.context","title":"context  <code>property</code>","text":"<pre><code>context: dict\n</code></pre> <p>The context of the template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.context_file_path","title":"context_file_path  <code>property</code>","text":"<pre><code>context_file_path: Path\n</code></pre> <p>The path to the template\u2019s context file.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.directory","title":"directory  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>directory: str = ''\n</code></pre> <p>The directory within the repository that contains the cookiecutter.json file.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.repo","title":"repo  <code>instance-attribute</code>","text":"<pre><code>repo: TemplateRepo\n</code></pre> <p>The source of the template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.Template.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Remove the cached template if it is a Zipfile.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateFormat","title":"TemplateFormat","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The format of a template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateFormat-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateFormat.PLAIN","title":"PLAIN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PLAIN = 'plain'\n</code></pre> <p>A plain directory that isn\u2019t under version control.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo","title":"TemplateRepo  <code>dataclass</code>","text":"<pre><code>TemplateRepo(\n    source: str,\n    cached_source: Path,\n    format: TemplateFormat,\n    locality: Locality,\n    checkout: Optional[str] = None,\n    password: Optional[str] = None,\n)\n</code></pre> <p>A template repository is a source of one or more templates.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo-attributes","title":"Attributes","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.cached_source","title":"cached_source  <code>instance-attribute</code>","text":"<pre><code>cached_source: Path\n</code></pre> <p>The path to the locally cached template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.checkout","title":"checkout  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>checkout: Optional[str] = None\n</code></pre> <p>The branch, tag or commit for the template to track.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.current_sha","title":"current_sha  <code>property</code>","text":"<pre><code>current_sha: Optional[str]\n</code></pre> <p>If the template is a git repository, return the current commit hash.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.format","title":"format  <code>instance-attribute</code>","text":"<pre><code>format: TemplateFormat\n</code></pre> <p>The format of the template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.latest_sha","title":"latest_sha  <code>property</code>","text":"<pre><code>latest_sha: Optional[str]\n</code></pre> <p>Return the latest SHA of this template\u2019s repo.</p> <p>If the template is not a git repository, it will always return <code>None</code>.</p> <p>Returns:</p> <code>Optional[str]</code> <p>The latest hexsha of the template or <code>None</code> if the template isn\u2019t a git repo</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.locality","title":"locality  <code>instance-attribute</code>","text":"<pre><code>locality: Locality\n</code></pre> <p>Is the template local or remote?</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.password","title":"password  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>password: Optional[str] = None\n</code></pre> <p>The password to use if template is a password-protected Zip archive.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.source","title":"source  <code>instance-attribute</code>","text":"<pre><code>source: str\n</code></pre> <p>The original path or URL to the template.</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.TemplateRepo.render_source","title":"render_source","text":"<pre><code>render_source(\n    output_dir: Optional[Path] = None,\n    commit: Optional[str] = None,\n) -&gt; Iterator[Path]\n</code></pre> <p>A context manager that provides the source from which to render the template.</p> <p>For git repositories, this will create a temporary working tree of the repository and yield the path to the working tree.</p> <p>For Zip archives, this will extract the archive to a temporary directory and yield the path</p> <p>For plain repos, it will yield the path to the directory.</p> <p>Parameters:</p> <code>output_dir</code> <p>The directory to extract the template to. If not provided, a temporary directory will be used.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>commit</code> <p>The commit to checkout if the template is a git repository.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> YIELDS DESCRIPTION <code>Path</code> <p>The path to the rendered template</p>"},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/types/#cookie_composer.templates.types.get_template_name","title":"get_template_name","text":"<pre><code>get_template_name(\n    path_or_url: str,\n    directory: Optional[str] = None,\n    checkout: Optional[str] = None,\n) -&gt; str\n</code></pre> <p>Get the name of the template using the path or URL.</p> <p>Parameters:</p> <code>path_or_url</code> <p>The URL or path to the template</p> <p> TYPE: <code>str</code> </p> <code>directory</code> <p>Directory within a git repository template that holds the cookiecutter.json file.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>checkout</code> <p>The branch, tag or commit to use if template is a git repository.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>ValueError</code> <p>If the path_or_url is not parsable</p> <p>Returns:</p> <code>str</code> <p>The name of the template without extensions</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> zipfile_repo","text":"<p>Utility functions for handling and fetching repo archives in zip format.</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo-classes","title":"Classes","text":""},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo-functions","title":"Functions","text":""},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo.cache_source","title":"cache_source","text":"<pre><code>cache_source(\n    zip_uri: str,\n    is_remote: bool,\n    cache_dir: Path,\n    no_input: bool = False,\n) -&gt; Path\n</code></pre> <p>Download and unpack a zipfile at a given URI.</p> <p>This will download the zipfile to the cookiecutter repository, and unpack into a temporary directory.</p> <p>Parameters:</p> <code>zip_uri</code> <p>The URI for the zipfile.</p> <p> TYPE: <code>str</code> </p> <code>is_remote</code> <p>Is the zip URI a URL or a file?</p> <p> TYPE: <code>bool</code> </p> <code>cache_dir</code> <p>The cookiecutter repository directory to put the archive into.</p> <p> TYPE: <code>Path</code> </p> <code>no_input</code> <p>Do not prompt for user input and eventually force a refresh of cached resources.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>Path</code> <p>The path to the unpacked zipfile.</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo.download_zipfile","title":"download_zipfile","text":"<pre><code>download_zipfile(\n    url: str, cache_dir: Path, no_input: bool = False\n) -&gt; Path\n</code></pre> <p>Download a zipfile from a URL into the cache_dir.</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo.extract_zipfile","title":"extract_zipfile","text":"<pre><code>extract_zipfile(\n    zip_path: Path,\n    output_dir: Optional[Path] = None,\n    password: Optional[str] = None,\n) -&gt; Path\n</code></pre> <p>Extract a zipfile into a temporary directory.</p> <p>Parameters:</p> <code>zip_path</code> <p>The path to the zipfile.</p> <p> TYPE: <code>Path</code> </p> <code>output_dir</code> <p>Optional path to extract the zipfile to. Defaults to a temporary directory.</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>password</code> <p>The password for a password-protected zipfile.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>InvalidZipPasswordError</code> <p>If the zipfile is password-protected and the user provides an incorrect password.</p> <p>Returns:</p> <code>Path</code> <p>The temporary directory containing the unpacked zipfile.</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo.template_repo_from_zipfile","title":"template_repo_from_zipfile","text":"<pre><code>template_repo_from_zipfile(\n    zip_uri: str,\n    locality: Locality,\n    cache_dir: Path,\n    no_input: bool = False,\n    password: Optional[str] = None,\n) -&gt; TemplateRepo\n</code></pre> <p>Return a template repo from a zipfile URI.</p>"},{"location":"reference/api/cookie_composer/templates/zipfile_repo/#cookie_composer.templates.zipfile_repo.validate_zipfile","title":"validate_zipfile","text":"<pre><code>validate_zipfile(zip_path: Path, zip_uri: str) -&gt; None\n</code></pre> <p>Validate that a zipfile exists and is not empty.</p> <p>Parameters:</p> <code>zip_path</code> <p>The path to the zipfile.</p> <p> TYPE: <code>Path</code> </p> <code>zip_uri</code> <p>The origin URI of the zipfile.</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>EmptyZipRepositoryError</code> <p>If the zipfile is empty.</p> <code>NoZipDirectoryError</code> <p>If the zipfile does not contain a top-level directory.</p>"},{"location":"topic-guides/","title":"Topic Guides","text":""},{"location":"topic-guides/composition-files/","title":"Composition files","text":"<p>Composition files are YAML documents with layer configurations. They are used for generating new projects and recording how a current project was generated. The composition files used for generating new projects are usually minimal, compared to the <code>.composition.yaml</code> file <code>cookie-composer</code> writes in the project as a record of state.</p> <p>For example, a basic composition file for generating new projects might look like:</p> Example composition<pre><code>template: \"https://github.com/coordt/cookiecomposer-templates\"\ndirectory: \"cookiecutter-boilerplate\"\nmerge_strategies:\n  '*.json': \"comprehensive\"\n  '*.yaml': \"comprehensive\"\n  '*.yml': \"comprehensive\"\n---\ntemplate: \"https://github.com/coordt/cookiecomposer-templates\"\ndirectory: \"cookiecutter-package\"\nmerge_strategies:\n  '*.json': \"comprehensive\"\n  '*.yaml': \"comprehensive\"\n  '*.yml': \"comprehensive\"\n---\ntemplate: \"https://github.com/coordt/cookiecomposer-templates\"\ndirectory: \"cookiecutter-docs\"\nmerge_strategies:\n  '*.json': \"comprehensive\"\n  '*.yaml': \"comprehensive\"\n  '*.yml': \"comprehensive\"\n</code></pre> <p>When this is used to create a project:</p> An interactive console example<pre><code>$ cookie-composer create https://raw.githubusercontent.com/coordt/cookiecomposer-templates/master/package-composition.yaml\nproject_name [python-boilerplate]: my-test-project\nproject_slug [my_test_project]:\nfriendly_name [My Test Project]:\nproject_short_description []:\nversion [0.1.0]:\nauthor [Who am I?]:\nemail [whoami@existential-crisis.doom]:\ngithub_user [whoami]:\n</code></pre> <p>The composition file saved in the new project (named <code>my-test-project</code> in this example) as <code>.composition.yaml</code> would look like:</p> A rendered composition<pre><code>checkout: null\ncommit: 3391f60471939dd412e93e9853e3328e7a5a8c44\ncontext:\n  _copy_without_render: [.github/**/*.jinja]\n  _dev_requirements: {bump2version: '&gt;=1.0.1', generate-changelog: '&gt;=0.7.6', git-fame: '&gt;=1.12.2',\n    pip-tools: ''}\n  _prod_requirements: {environs: '&gt;=9.3.5'}\n  _test_requirements: {black: '&gt;=19.10b0', coverage: '&gt;=6.1.2', flake8: '&gt;=4.0.1',\n    pre-commit: '&gt;=2.15.0', pytest: '&gt;=6.0.0', pytest-cov: '&gt;=3.0.0'}\n  author: Who am I?\n  email: whoami@existential-crisis.doom\n  friendly_name: My Test Project\n  github_user: whoami\n  project_name: my-test-project\n  project_short_description: ''\n  project_slug: my_test_project\n  version: 0.1.0\ndirectory: cookiecutter-boilerplate\nmerge_strategies: {'*.json': comprehensive, '*.yaml': comprehensive, '*.yml': comprehensive}\nno_input: false\noverwrite: []\noverwrite_exclude: []\npassword: null\nskip_generation: []\nskip_hooks: false\nskip_if_file_exists: true\ntemplate: https://github.com/coordt/cookiecomposer-templates\n---\ncheckout: null\ncommit: 3391f60471939dd412e93e9853e3328e7a5a8c44\ncontext: {friendly_name: My Test Project, project_name: my-test-project, project_short_description: '',\n  project_slug: my_test_project, version: 0.1.0}\ndirectory: cookiecutter-package\nmerge_strategies: {'*.json': comprehensive, '*.yaml': comprehensive, '*.yml': comprehensive}\nno_input: false\noverwrite: []\noverwrite_exclude: []\npassword: null\nskip_generation: []\nskip_hooks: false\nskip_if_file_exists: true\ntemplate: https://github.com/coordt/cookiecomposer-templates\n---\ncheckout: null\ncommit: 3391f60471939dd412e93e9853e3328e7a5a8c44\ncontext:\n  _copy_without_render: [docsrc/**/*.rst]\n  _dev_requirements: {bump2version: '&gt;=1.0.1', generate-changelog: '&gt;=0.7.6', git-fame: '&gt;=1.12.2',\n    pip-tools: ''}\n  _docs_requirements: {Sphinx: '&gt;=4.3.0', furo: '', ghp-import: '', linkify-it-py: '',\n    myst-parser: '', sphinx-autodoc-typehints: '', sphinx-click: '', sphinx-copybutton: ''}\n  _prod_requirements: {environs: '&gt;=9.3.5'}\n  friendly_name: My Test Project\n  github_user: whoami\n  project_name: my-test-project\n  project_slug: my_test_project\ndirectory: cookiecutter-docs\nmerge_strategies: {'*.json': comprehensive, '*.yaml': comprehensive, '*.yml': comprehensive}\nno_input: false\noverwrite: []\noverwrite_exclude: []\npassword: null\nskip_generation: []\nskip_hooks: false\nskip_if_file_exists: true\ntemplate: https://github.com/coordt/cookiecomposer-templates\n</code></pre> <p>If you look closely you\u2019ll see that <code>.composition.yaml</code> contains the contents of <code>package-composition.yaml</code>. Internally the <code>.composition.yaml</code> file is termed a \u201crendered composition\u201d because it contains all the parameters used to render this specific project. This rendered composition is used when applying updates of the templates. </p>"},{"location":"topic-guides/composition-files/#template-layers","title":"Template layers","text":"<p>Composition files are technically YAML streams consisting of one or more documents describing a layer configuration.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/composable-templates/","title":"Designing composable templates","text":""},{"location":"tutorial/compositions/","title":"Building a project from a composition","text":"<p>Do the same thing as incrementally layering, but use a composition to alleviate the issues.</p> <p>Issues to resolve:</p> <ul> <li>similar prompts<ul> <li>full_name vs. author_name</li> <li>email vs. author_email</li> <li>project_short_description vs. package_description</li> <li>project_slug vs. package_name</li> <li>homepage vs. package_url</li> </ul> </li> <li>Duplicate files:<ul> <li>README.md vs README.rst</li> <li>LICENSE</li> <li>.gitignore</li> </ul> </li> <li>Unused files<ul> <li>.releaserc.yml</li> <li>renovate.json</li> </ul> </li> </ul>"},{"location":"tutorial/compositions/#create-a-base-composition","title":"Create a base composition","text":"<p>A composition is a series of template layers. We can reproduce the results of the previous tutorial using this file: </p> my-package-composition.yaml<pre><code>template: https://github.com/rwxd/cookiecutter-github-project\n---\ntemplate: https://github.com/kragniz/cookiecutter-pypackage-minimal\n</code></pre> <p>We didn\u2019t change the default for the <code>project_slug</code>, <code>topics</code> or <code>open_source_license</code> prompts. You don\u2019t have to change all the prompts or include all the prompts in the composition.</p> <p>Then run:</p> <pre><code>$ cookie-composer create /path/to/my-package-composition.yaml\n\nfull_name [rwxd]: Demo User\nemail [rwxd@pm.me]: demo_user@example.com\ngithub_username [rwxd]: demo_user\nproject_name [Python Boilerplate]: Cookie Composer Demo\nproject_slug [composer_demo]:\nproject_short_description [Python Boilerplate contains all the boilerplate you need to create a Python package.]: Cookie Composer Demo\nhomepage [https://rwxd.github.io/composer_demo/]: https://demo_user.github.io/composer_demo/\nSelect project_type:\n1 - python\n2 - go\n3 - ansible\n4 - other\nChoose from 1, 2, 3, 4 [1]:\ntopics []:\nSelect open_source_license:\n1 - MIT license\n2 - BSD license\n3 - ISC license\n4 - Apache Software License 2.0\n5 - GNU General Public License v3\n6 - Not open source\nChoose from 1, 2, 3, 4, 5, 6 [1]:\nauthor_name [Louis Taylor]: Demo User\nauthor_email [louis@kragniz.eu]: demo_user@example.com\npackage_name [cookiecutter_pypackage_minimal]: composer_demo\npackage_version [0.1.0]:\npackage_description [An opinionated, minimal cookiecutter template for Python packages]: Cookie Composer Demo\npackage_url [https://github.com/kragniz/cookiecutter-pypackage-minimal]: https://github.com/demo_user/composer_demo\nreadme_pypi_badge [True]:\nreadme_travis_badge [True]:\nreadme_travis_url [https://travis-ci.org/kragniz/cookiecutter-pypackage-minimal]: https://travis-ci.org/demouser/composer_demo\n</code></pre> <p>Both layers are applied without requiring a git repository or multiple commands.</p>"},{"location":"tutorial/compositions/#providing-better-defaults","title":"Providing better defaults","text":"<p>The composition can also improve the defaults for the template prompts by:</p> <ul> <li>Providing new defaults that work better for your use case.</li> <li>Using a default from a previous template.</li> </ul> <p>Let\u2019s start by changing some defaults to the first template. You can find the original prompt in this template\u2019s cookiecutter.json file.</p> my-package-composition.yaml<pre><code>template: https://github.com/rwxd/cookiecutter-github-project\ncontext:\n  full_name: Your Name\n  email: \"{{ cookiecutter.full_name.lower().replace(' ', '_') }}@example.com\"\n  github_username: \"{{ cookiecutter.full_name.lower().replace(' ', '_') }}\"\n  homepage: \"https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug }}\"\n  project_short_description: \"\"\n  project_type: python\n---\ntemplate: https://github.com/kragniz/cookiecutter-pypackage-minimal\n</code></pre> <p>The new defaults provide better suggestions based on previous prompt answers.</p>"},{"location":"tutorial/compositions/#using-values-from-previous-templates","title":"Using values from previous templates","text":"<p>The second template has several prompts that simply synonymns of promts from the previous template. It would be nice if we could use our answers from that template here.</p> <p>Let\u2019s do that. You can find the original prompts in this template\u2019s cookiecutter.json file.</p> my-package-composition.yaml<pre><code>template: https://github.com/rwxd/cookiecutter-github-project\ncontext:\n  full_name: Your Name\n  email: \"{{ cookiecutter.full_name.lower().replace(' ', '_') }}@example.com\"\n  github_username: \"{{ cookiecutter.full_name.lower().replace(' ', '_') }}\"\n  homepage: \"https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug }}\"\n  project_short_description: \"\"\n  project_type: python\n---\ntemplate: https://github.com/kragniz/cookiecutter-pypackage-minimal\ncontext:\n  author_name: \"{{ cookiecutter.full_name }}\"\n  author_email: \"{{ cookiecutter.email }}\"\n  package_name: \"{{ cookiecutter.project_slug }}\"\n  package_description: \"{{ cookiecutter.project_short_description }}\"\n  package_url: \"https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}\"\n  readme_travis_badge: false\n  readme_travis_url: \"\"\n</code></pre> <p>Now:</p> <ul> <li><code>author_name</code> defaults to <code>full_name</code>\u2019s value</li> <li><code>author_email</code> defaults to <code>email</code>\u2019s value</li> <li><code>package_name</code> defaults to <code>project_slug</code>\u2019s value</li> <li><code>package_description</code> defaults to <code>project_short_description</code>\u2019s value</li> <li><code>package_url</code> references both <code>github_username</code>\u2019s and <code>project_slug</code>\u2019s values</li> </ul>"},{"location":"tutorial/compositions/#putting-it-into-action","title":"Putting it into action","text":"<pre><code>$ cookie-composer create /path/to/tutorial-composition-3.yaml\n\nfull_name [Your Name]: Demo User\nemail [demo_user@example.com]:\ngithub_username [demo_user]:\nproject_name [Python Boilerplate]: Composer Demo\nproject_slug [composer_demo]:\nproject_short_description []: Cookie Composer Demo\nhomepage [https://demo_user.github.io/composer_demo]:\nSelect project_type:\n1 - python\n2 - go\n3 - ansible\n4 - other\nChoose from 1, 2, 3, 4 [1]:\ntopics []:\nSelect open_source_license:\n1 - MIT license\n2 - BSD license\n3 - ISC license\n4 - Apache Software License 2.0\n5 - GNU General Public License v3\n6 - Not open source\nChoose from 1, 2, 3, 4, 5, 6 [1]:\nauthor_name [Demo User]:\nauthor_email [demo_user@example.com]:\npackage_name [composer_demo]:\npackage_version [0.1.0]:\npackage_description [Cookie Composer Demo]:\npackage_url [https://github.com/demo_user/composer_demo]:\nreadme_pypi_badge [True]:\nreadme_travis_badge [False]:\nreadme_travis_url []:\n</code></pre> <p>Notice how the better defaults allow less typing and more consistency.</p>"},{"location":"tutorial/incrementally-layering/","title":"Building a project layer by layer","text":""},{"location":"tutorial/incrementally-layering/#create-a-project-from-a-template","title":"Create a project from a template","text":"<p>https://github.com/rwxd/cookiecutter-github-project <pre><code>$ cookie-composer create https://github.com/rwxd/cookiecutter-github-project\nfull_name [rwxd]: Demo User\nemail [rwxd@pm.me]: demo_user@example.com\ngithub_username [rwxd]: demo_user\nproject_name [Python Boilerplate]: Composer Demo\nproject_slug [composer_demo]:\nproject_short_description [Python Boilerplate contains all the boilerplate you need to create a Python package.]: A Cookie Composer demo\nhomepage [https://rwxd.github.io/composer_demo/]: https://demo_user.github.io/composer_demo/\nSelect project_type:\n1 - python\n2 - go\n3 - ansible\n4 - other\nChoose from 1, 2, 3, 4 [1]:\ntopics []:\nSelect open_source_license:\n1 - MIT license\n2 - BSD license\n3 - ISC license\n4 - Apache Software License 2.0\n5 - GNU General Public License v3\n6 - Not open source\nChoose from 1, 2, 3, 4, 5, 6 [1]:\n</code></pre></p>"},{"location":"tutorial/incrementally-layering/#add-an-python-package-layer","title":"Add an Python package layer","text":"<pre><code>$ cd composer_demo\n$ cookie-composer add https://github.com/kragniz/cookiecutter-pypackage-minimal\nUsage: cookie-composer add [OPTIONS] PATH_OR_URL [DESTINATION]\nTry 'cookie-composer add --help' for help.\n\u256d\u2500 Error \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Some cookie composer commands only work on git repositories. Please make the destination directory a    \u2502\n\u2502 git repo.                                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <pre><code>$ git add -A\n$ git commit -m\"Initial commit\"\n[master (root-commit) 90a6a74] Initial commit\n 15 files changed, 352 insertions(+)\n create mode 100644 .composition.yaml\n create mode 100644 .github/ISSUE_TEMPLATE/bug_report_md\n create mode 100644 .github/ISSUE_TEMPLATE/config.yml\n create mode 100644 .github/ISSUE_TEMPLATE/feature_request.md\n create mode 100644 .github/dependabot.yml\n create mode 100644 .github/settings.yml\n create mode 100644 .github/workflows/semantic-release.yml\n create mode 100644 .gitignore\n create mode 100644 .pre-commit-config.yaml\n create mode 100644 .releaserc.yml\n create mode 100644 LICENSE\n create mode 100644 Makefile\n create mode 100644 README.md\n create mode 100644 renovate.json\n create mode 100644 requirements-dev.txt\n ```\n\n```console\ncookie-composer add https://github.com/kragniz/cookiecutter-pypackage-minimal\nauthor_name [Louis Taylor]: Demo User\nauthor_email [louis@kragniz.eu]: demo_user@example.com\npackage_name [cookiecutter_pypackage_minimal]: composer_demo\npackage_version [0.1.0]:\npackage_description [An opinionated, minimal cookiecutter template for Python packages]: A Cookie Composer demo\npackage_url [https://github.com/kragniz/cookiecutter-pypackage-minimal]: https://github.com/demo_user/composer_demo\nreadme_pypi_badge [True]:\nreadme_travis_badge [True]: \nreadme_travis_url [https://travis-ci.org/kragniz/cookiecutter-pypackage-minimal]: https://travis-ci.org/demouser/composer_demo\n</code></pre> <p>Now on branch <code>add_layer_cookiecutter-pypackage-minimal</code></p> <pre><code>$ git status\nOn branch add_layer_cookiecutter-pypackage-minimal\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   .composition.yaml\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    README.rst\n    python_boilerplate/\n    setup.py\n    tests/\n    tox.ini\n</code></pre> <p>The modified <code>.composition.yaml</code> file includes the new layer information.</p> <p>Let\u2019s commit the new files</p> <pre><code>$ git add -A\n$ git commit -m\"Added layer cookiecutter-pypackage-minimal\"\n[add_layer_cookiecutter-pypackage-minimal dc62ba1] Added layer cookiecutter-pypackage-minimal\n 6 files changed, 115 insertions(+)\n create mode 100644 README.rst\n create mode 100644 python_boilerplate/__init__.py\n create mode 100644 setup.py\n create mode 100644 tests/test_sample.py\n create mode 100644 tox.ini\n</code></pre> <p>Now the new branch is ready to merge.</p> <pre><code>$ git checkout master\n$ git merge add_layer_cookiecutter-pypackage-minimal\nUpdating aa3f701..dc62ba1\nFast-forward\n .composition.yaml              | 24 ++++++++++++++++++++++++\n README.rst                     | 32 ++++++++++++++++++++++++++++++++\n python_boilerplate/__init__.py |  5 +++++\n setup.py                       | 44 ++++++++++++++++++++++++++++++++++++++++++++\n tests/test_sample.py           |  4 ++++\n tox.ini                        |  6 ++++++\n 6 files changed, 115 insertions(+)\n create mode 100644 README.rst\n create mode 100644 python_boilerplate/__init__.py\n create mode 100644 setup.py\n create mode 100644 tests/test_sample.py\n create mode 100644 tox.ini\n$ git branch -d add_layer_cookiecutter-pypackage-minimal\nDeleted branch add_layer_cookiecutter-pypackage-minimal (was dc62ba1).\n</code></pre> <ol> <li>Show some of the issues when using templates not designed for composition</li> </ol> <ul> <li>similar questions<ul> <li>full_name vs. author_name</li> <li>email vs. author_email</li> <li>project_short_description vs. package_description</li> <li>project_slug vs. package_name</li> <li>homepage vs. package_url</li> </ul> </li> <li>Duplicate files:<ul> <li>README.md vs README.rst</li> <li>LICENSE</li> <li>.gitignore</li> </ul> </li> <li>Unused files<ul> <li>.releaserc.yml</li> <li>renovate.json</li> </ul> </li> </ul> <ol> <li>Read compositions for ways to improve this.</li> </ol>"}]}